name: Crowd service deployer
description: Deploys to crowd.dev kubernetes cloud environments

inputs:
  service:
    description: Which cloud service to deploy
    required: true

  image:
    description: Which docker image to deploy (full docker registry name with tag)
    required: true

  cluster:
    description: To which cloud cluster to deploy
    required: true

  prioritized:
    description: Is the service listening on prioritized queues?
    required: false
    default: 'false'

  cloud_env:
    description: Which cloud environment are we deploying to?
    required: false
    default: 'default'

runs:
  using: composite
  steps:
    - name: Initialize kubernetes kubectl context
      shell: bash
      run: aws eks update-kubeconfig --name ${{ inputs.cluster }} --role-arn ${{ env.CROWD_ROLE_ARN }}
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.AWS_REGION }}

    - name: Deploy image (non prioritized)
      if: inputs.prioritized == 'false'
      shell: bash
      run: kubectl set image deployments/${{ inputs.service }}-dpl ${{ inputs.service }}=${{ inputs.image }}

    - name: Deploy image (prioritized - production)
      if: inputs.prioritized == 'true' && inputs.cloud_env == 'prod'
      shell: bash
      run: |
        kubectl set image deployments/${{ inputs.service }}-system-dpl ${{ inputs.service }}-system=${{ inputs.image }}
        kubectl set image deployments/${{ inputs.service }}-normal-dpl ${{ inputs.service }}-normal=${{ inputs.image }}
        kubectl set image deployments/${{ inputs.service }}-high-dpl ${{ inputs.service }}-high=${{ inputs.image }}
        kubectl set image deployments/${{ inputs.service }}-urgent-dpl ${{ inputs.service }}-urgent=${{ inputs.image }}

    - name: Deploy image (prioritized - lfx production)
      if: inputs.prioritized == 'true' && inputs.cloud_env == 'lfx_prod'
      shell: bash
      run: |
        kubectl set image deployments/${{ inputs.service }}-system-dpl ${{ inputs.service }}-system=${{ inputs.image }}
        kubectl set image deployments/${{ inputs.service }}-normal-dpl ${{ inputs.service }}-normal=${{ inputs.image }}
        kubectl set image deployments/${{ inputs.service }}-high-dpl ${{ inputs.service }}-high=${{ inputs.image }}

    - name: Deploy image (prioritized - staging)
      if: inputs.prioritized == 'true' && inputs.cloud_env == 'staging'
      shell: bash
      run: kubectl set image deployments/${{ inputs.service }}-normal-dpl ${{ inputs.service }}-normal=${{ inputs.image }}

    - name: Deploy image (prioritized - lfx staging)
      if: inputs.prioritized == 'true' && inputs.cloud_env == 'lfx_staging'
      shell: bash
      run: kubectl set image deployments/${{ inputs.service }}-normal-dpl ${{ inputs.service }}-normal=${{ inputs.image }}

    - uses: ./.github/actions/slack-notify
      with:
        message: 'Service *${{ inputs.service }}* was just deployed using docker image `${{ inputs.image }}`'
