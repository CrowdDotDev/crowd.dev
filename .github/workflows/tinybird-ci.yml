# Taken from https://github.com/tinybirdco/ci/blob/main/.github/workflows/ci.yml 

name: Tinybird CI

on:
  workflow_call:
    inputs:
      data_project_dir:
        description: "relative path of the folder containing the data project"
        required: false
        type: string
        default: services/libs/tinybird
      tb_format:
        description: "true to force formatting of Datafiles"
        required: false
        type: boolean
        default: false
      git_depth:
        description: "Number of commits to fetch. 0 indicates all history for all branches and tags"
        required: false
        type: number
        default: 300
      use_last_partition:
        description: "true to include --last-partition flag when creating branches"
        required: false
        type: boolean
        default: true
      tb_env:
        description: "a global environment variable to replace inside the jobs and run conditional workflows (e.g. staging/production deployments)"
        required: false
        type: string
    secrets:
      tb_admin_token:
        required: true
      tb_host:
        required: true

jobs:
  check:
    name: Datafiles checks
    runs-on: ubuntu-latest
    if: ${{ inputs.tb_format && github.event.action != 'closed' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Tinybird CLI
        run: |
          if [ -f "${{ inputs.data_project_dir }}/requirements.txt" ]; then
            pip install -r ${{ inputs.data_project_dir }}/requirements.txt
          else
            pip install tinybird-cli
          fi

      - name: Get changed files
        id: files
        uses: tj-actions/changed-files@v42
        with:
          files: |
            **/*.{datasource,incl,pipe}

      - name: Check formatting
        if: ${{ steps.files.outputs.any_changed == 'true' }}
        shell: bash
        run: |
          for file in ${{ steps.files.outputs.all_changed_files }}; do
            tb fmt --diff "$file"
          done

  deploy:
    name: Deploy to CI Branch
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.data_project_dir }}
    if: ${{ github.event.action != 'closed' }}
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: ${{ inputs.git_depth }}
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: "x64"
          cache: 'pip'

      - name: Validate input
        run: |
          [[ "${{ secrets.tb_admin_token }}" ]] || { echo "Go to the tokens section in your Workspace, copy the 'admin token' and set TB_ADMIN_TOKEN as a Secret in your Git repository"; exit 1; }

      - name: Set environment variables
        run: |
          [[ -z "${_ENV_FLAGS}" ]] && _ENV_FLAGS="${{ inputs.use_last_partition && '--last-partition ' || '' }}--wait"
          _NORMALIZED_BRANCH_NAME=$(echo $DATA_PROJECT_DIR | rev | cut -d "/" -f 1 | rev | tr '.-' '_')
          GIT_BRANCH=${GITHUB_HEAD_REF}
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
          echo "_ENV_FLAGS=$_ENV_FLAGS" >> $GITHUB_ENV
          echo "_NORMALIZED_BRANCH_NAME=$_NORMALIZED_BRANCH_NAME" >> $GITHUB_ENV
          echo "TB_ENV=${{ inputs.tb_env }}" >> $GITHUB_ENV
          grep -v '^#' .tinyenv >> $GITHUB_ENV
          echo >> $GITHUB_ENV # Ensures new line at the end of the file

      - name: Install Tinybird CLI
        run: |
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            pip install tinybird-cli
          fi

      - name: Tinybird version
        run: tb --version

      - name: Check all the data files syntax
        run: tb check

      - name: Check auth
        run: tb --host ${{ secrets.tb_host }} --token ${{ secrets.tb_admin_token }} auth info

      - name: Try delete previous Branch
        run: |
          output=$(tb --host ${{ secrets.tb_host }} --token ${{ secrets.tb_admin_token }} branch ls)
          BRANCH_NAME="tmp_ci_${_NORMALIZED_BRANCH_NAME}_${{ github.event.pull_request.number }}"

          # Check if the branch name exists in the output
          if echo "$output" | grep -q "\b$BRANCH_NAME\b"; then
              tb \
                --host ${{ secrets.tb_host }} \
                --token ${{ secrets.tb_admin_token }} \
                branch rm $BRANCH_NAME \
                --yes
          else
              echo "Skipping clean up: The Branch '$BRANCH_NAME' does not exist."
          fi

      - name: Create new test Branch
        run: |
          tb \
          --host ${{ secrets.tb_host }} \
          --token ${{ secrets.tb_admin_token }} \
          branch create tmp_ci_${_NORMALIZED_BRANCH_NAME}_${{ github.event.pull_request.number }} \
          ${_ENV_FLAGS}

      - name: Deploy changes to the test Branch
        run: |
            source .tinyenv
            DEPLOY_FILE=./deploy/${VERSION}/deploy.sh
            if [ ! -f "$DEPLOY_FILE" ]; then
              echo "$DEPLOY_FILE not found, running default tb deploy command"
              tb deploy ${CI_FLAGS}
              tb release ls
            fi

      - name: Custom deployment to the test Branch
        run: |
            source .tinyenv
            DEPLOY_FILE=./deploy/${VERSION}/deploy.sh
            if [ -f "$DEPLOY_FILE" ]; then
              echo "$DEPLOY_FILE found"
              if ! [ -x "$DEPLOY_FILE" ]; then
                echo "Error: You do not have permission to execute '$DEPLOY_FILE'. Run:"
                echo "> chmod +x $DEPLOY_FILE"
                echo "and commit your changes"
                exit 1
              else
                $DEPLOY_FILE
              fi
            fi

  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs:
      - deploy
    defaults:
      run:
        working-directory: ${{ inputs.data_project_dir }}
    if: ${{ github.event.action != 'closed' }}
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: ${{ inputs.data_project_dir }}
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: "x64"
          cache: 'pip'

      - name: Validate input
        run: |
          [[ "${{ secrets.tb_admin_token }}" ]] || { echo "Go to the tokens section in your Workspace, copy the 'admin token (user@domain.com)' associated to a user account and set TB_ADMIN_TOKEN as a Secret in your Git repository"; exit 1; }
      - name: Set environment variables
        run: |
          _ENV_FLAGS="${ENV_FLAGS:=--last-partition --wait}"
          _NORMALIZED_ENV_NAME=$(echo $DATA_PROJECT_DIR | rev | cut -d "/" -f 1 | rev | tr '.-' '_')
          GIT_BRANCH=${GITHUB_HEAD_REF}
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
          echo "_ENV_FLAGS=$_ENV_FLAGS" >> $GITHUB_ENV
          echo "_NORMALIZED_ENV_NAME=$_NORMALIZED_ENV_NAME" >> $GITHUB_ENV
          grep -v '^#' .tinyenv >> $GITHUB_ENV
          echo >> $GITHUB_ENV # Ensures new line at the end of the file
      - name: Install Tinybird CLI
        run: |
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            pip install tinybird-cli
          fi
      - name: Tinybird version
        run: tb --version

      - name: Check auth
        run: tb --host ${{ secrets.tb_host }} --token ${{ secrets.tb_admin_token }} auth info

      - name: Use Branch
        run: |
          BRANCH_NAME="tmp_ci_${_NORMALIZED_BRANCH_NAME}_${{ github.event.pull_request.number }}"
          tb --host ${{ secrets.tb_host }} --token ${{ secrets.tb_admin_token }} branch use $BRANCH_NAME

      - name: Get env token
        run: |
          ENV_TOKEN=$(python -c "import json; print(json.load(open('.tinyb'))['token'])")
          echo "::add-mask::$ENV_TOKEN"
          echo "TB_ENV_TOKEN=$ENV_TOKEN" >> $GITHUB_ENV

      - name: Post deploy
        run: |
          POSTDEPLOY_FILE=./deploy/${VERSION}/postdeploy.sh
          if [ -f "$POSTDEPLOY_FILE" ]; then
            if ! [ -x "$POSTDEPLOY_FILE" ]; then
              echo "Error: You do not have permission to execute '$POSTDEPLOY_FILE'. Run:"
              echo "> chmod +x $POSTDEPLOY_FILE"
              echo "and commit your changes"
              exit 1
            else
              $POSTDEPLOY_FILE
            fi
          fi

      - name: Get regression labels
        id: regression_labels
        uses: alrocar/get-labels-action@v1.0.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          label_key: regression
  
      - name: Run pipe regression tests
        run: |
          source .tinyenv
          echo ${{ steps.regression_labels.outputs.labels }}
          REGRESSION_LABELS=$(echo "${{ steps.regression_labels.outputs.labels }}" | awk -F, '{for (i=1; i<=NF; i++) if ($i ~ /^--/) print $i}' ORS=',' | sed 's/,$//')
          echo "Regression labels: ${REGRESSION_LABELS}"

          CONFIG_FILE=./tests/regression.yaml
          BASE_CMD="tb branch regression-tests"
          LABELS_CMD="$(echo ${REGRESSION_LABELS} | tr , ' ')"
          if [ -f ${CONFIG_FILE} ]; then
              echo "Config file '${CONFIG_FILE}' found, adding pull request labels as options"
              ${BASE_CMD} -f ${CONFIG_FILE} --wait ${LABELS_CMD}
          else
              echo "Config file not found at '${CONFIG_FILE}', running with default values"
              ${BASE_CMD} coverage --wait ${LABELS_CMD}
          fi

      # - name: Append fixtures
      #   run: |
      #     if [ -f ./scripts/append_fixtures.sh ]; then
      #       echo "append_fixtures script found"
      #       ./scripts/append_fixtures.sh
      #     fi

      # - name: Run fixture tests
      #   run: |
      #     if [ -f ./scripts/exec_test.sh ]; then
      #       ./scripts/exec_test.sh
      #     fi

      # - name: Run data quality tests
      #   run: |
      #     tb test run -v -c 4

  cleanup:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.data_project_dir }}
    if: ${{ github.event.action == 'closed' }}
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: "x64"
          cache: 'pip'

      - name: Validate input
        run: |
          [[ "${{ secrets.tb_admin_token }}" ]] || { echo "Go to the tokens section in your Workspace, copy the 'admin token' and set TB_ADMIN_TOKEN as a Secret in your Git repository"; exit 1; }

      - name: Install Tinybird CLI
        run: |
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            pip install tinybird-cli
          fi

      - name: Tinybird version
        run: tb --version       

      - name: Try delete previous Branch
        run: |
          output=$(tb --host ${{ secrets.tb_host }} --token ${{ secrets.tb_admin_token }} branch ls)
          BRANCH_NAME="tmp_ci_${_NORMALIZED_BRANCH_NAME}_${{ github.event.pull_request.number }}"

          # Check if the branch name exists in the output
          if echo "$output" | grep -q "\b$BRANCH_NAME\b"; then
              tb \
                --host ${{ secrets.tb_host }} \
                --token ${{ secrets.tb_admin_token }} \
                branch rm $BRANCH_NAME \
                --yes
          else
              echo "Skipping clean up: The Branch '$BRANCH_NAME' does not exist."
          fi