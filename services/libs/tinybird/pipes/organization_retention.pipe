DESCRIPTION >
    - `organization_retention.pipe` serves the organization retention widget calculating what percentage of organizations remain active between consecutive periods.
    - **Requires `granularity` parameter** to define time periods for retention analysis.
    - Retention calculation: compares organizations active in current period vs previous period to calculate retention percentage.
    - Uses same logic as `contributor_retention.pipe` but tracks `organizationId` instead of `memberId` for institutional engagement analysis.
    - Uses `activities_filtered_retention` pipe which extends time range to include preceding period data for baseline comparison.
    - Primary use case: measuring organizational engagement persistence and institutional commitment over time.
    - Parameters:
    - `project`: Required string for project slug (e.g., 'k8s', 'tensorflow') - inherited from `activities_filtered_retention`
    - `repos`: Optional array of repository URLs for filtering (inherited from `activities_filtered_retention`)
    - `startDate`: Optional DateTime filter, automatically extended backwards by one granularity period
    - `endDate`: Optional DateTime filter for activities before timestamp (e.g., '2024-12-31 23:59:59')
    - `repos`: Optional array of repository URLs (e.g., ['https://github.com/kubernetes/kubernetes'])
    - `platform`: Optional string filter for source platform (e.g., 'github', 'discord', 'slack')
    - `activity_type`: Optional string filter for single activity type (e.g., 'authored-commit')
    - `activity_types`: Optional array of activity types (e.g., ['authored-commit', 'co-authored-commit'])
    - `onlyContributions`: Optional boolean, defaults to 1 (contributions only), set to 0 for all activities
    - `granularity`: Required string for time aggregation ('daily', 'weekly', 'monthly', 'quarterly', 'yearly')
    - Response: `startDate`, `endDate`, `retentionRate` (percentage of organizations retained from previous period)

TAGS "Widget", "Retention", "Organizations", "Cohort analysis"

NODE aggregated_organizations
SQL >
    %
    SELECT
        CASE
            WHEN {{ granularity }} = 'daily'
            THEN toDate(timestamp)
            WHEN {{ granularity }} = 'weekly'
            THEN toStartOfWeek(timestamp)
            WHEN {{ granularity }} = 'monthly'
            THEN toStartOfMonth(timestamp)
            WHEN {{ granularity }} = 'quarterly'
            THEN toStartOfQuarter(timestamp)
            WHEN {{ granularity }} = 'yearly'
            THEN toStartOfYear(timestamp)
        END AS period,
        groupUniqArray(organizationId) AS orgs
    FROM activities_filtered_retention
    GROUP BY period

NODE retention
SQL >
    %
    SELECT
        ts."startDate" AS "startDate",
        ts."endDate" as "endDate",
        -- coalesce(prev.orgs, []) AS previous_org_ids,
        -- coalesce(curr.orgs, []) AS current_org_ids,
        -- arrayIntersect(coalesce(curr.orgs, []), coalesce(prev.orgs, [])) AS retained_org_ids,
        length(arrayIntersect(coalesce(curr.orgs, []), coalesce(prev.orgs, []))) AS retained_orgs,
        length(coalesce(prev.orgs, [])) AS previous_period_total,
        if(
            previous_period_total > 0, round(100 * retained_orgs / previous_period_total, 2), 0
        ) AS "retentionRate"
    FROM generate_timeseries ts
    LEFT JOIN aggregated_organizations AS curr ON ts."startDate" = curr.period
    LEFT JOIN
        aggregated_organizations AS prev
        ON prev.period = CASE
            WHEN {{ granularity }} = 'daily'
            THEN ts."startDate" - INTERVAL 1 DAY
            WHEN {{ granularity }} = 'weekly'
            THEN ts."startDate" - INTERVAL 1 WEEK
            WHEN {{ granularity }} = 'monthly'
            THEN ts."startDate" - INTERVAL 1 MONTH
            WHEN {{ granularity }} = 'quarterly'
            THEN ts."startDate" - INTERVAL 1 QUARTER
            WHEN {{ granularity }} = 'yearly'
            THEN ts."startDate" - INTERVAL 1 YEAR
        END

NODE organization_retention_result
SQL >
    SELECT "startDate", "endDate", "retentionRate" FROM retention ORDER BY "startDate"
