DESCRIPTION >
    - `active_days.pipe` serves the "Development - Active days" widget showing activity patterns and development velocity.
    - Number of days contributors were actively involved in the project and the total contributions made during the selected period. This includes commits, pull requests, and more.
    - **When `granularity` is NOT provided, returns active days count and average contributions per day** across the filtered time range.
    - **When `granularity` is provided, returns time-series data** showing activity counts for each time period.
    - Calculates active days as distinct dates with qualifying development activities for project health analysis.
    - Primary use case: measuring development consistency and identifying active vs inactive periods in project timeline.
    - Parameters:
    - `project`: Required string for project slug (e.g., 'k8s', 'tensorflow') - inherited from `segments_filtered`
    - `repos`: Optional array of repository URLs for filtering (inherited from `segments_filtered`)
    - `startDate`: Optional DateTime filter for activities after timestamp (e.g., '2024-01-01 00:00:00')
    - `endDate`: Optional DateTime filter for activities before timestamp (e.g., '2024-12-31 23:59:59')
    - `repos`: Optional array of repository URLs (e.g., ['https://github.com/kubernetes/kubernetes'])
    - `platform`: Optional string filter for source platform (e.g., 'github', 'discord', 'slack')
    - `onlyContributions`: Optional boolean, defaults to 1 (contributions only), set to 0 for all activities
    - `granularity`: Optional string for time aggregation ('daily', 'weekly', 'monthly', 'quarterly', 'yearly')
    - Response:
    - Without granularity: `activeDaysCount`, `avgContributionsPerDay`
    - With granularity: `startDate`, `endDate`, and `activityCount` for each time period

TAGS "Widget", "Development metrics", "Active days"

NODE timeseries_generation_for_active_days
SQL >
    %
    {% if defined(granularity) %}
        SELECT
            ds."startDate",
            ds."endDate",
            count(case when af.id != '' then af.id else null end) AS "activityCount"
        FROM generate_timeseries ds
        LEFT JOIN
            activities_filtered af
            ON CASE
                WHEN {{ granularity }} = 'daily'
                THEN toDate(af.timestamp)
                WHEN {{ granularity }} = 'weekly'
                THEN toStartOfWeek(af.timestamp)
                WHEN {{ granularity }} = 'monthly'
                THEN toStartOfMonth(af.timestamp)
                WHEN {{ granularity }} = 'quarterly'
                THEN toStartOfQuarter(af.timestamp)
                WHEN {{ granularity }} = 'yearly'
                THEN toStartOfYear(af.timestamp)
            END
            = ds.startDate
            and af.type in (
                'pull_request-reviewed',
                'issues-closed',
                'merge_request-closed',
                'pull_request-closed',
                'authored-commit',
                'committed-commit',
                'informed-commit',
                'signed-off-commit',
                'reviewed-commit',
                'co-authored-commit',
                'reported-commit',
                'tested-commit',
                'influenced-commit',
                'approved-commit',
                'resolved-commit',
                'issues-opened',
                'issue-comment',
                'pull_request-opened',
                'pull_request-comment',
                'pull_request-review-thread-comment',
                'pull_request-merged',
                'changeset-created',
                'changeset-merged',
                'changeset-abandoned',
                'discussion-started',
                'discussion-comment',
                'merge_request-opened',
                'merge_request-comment',
                'merge_request-review-approved'
            )
        GROUP BY ds."startDate", ds."endDate"
        order by ds."startDate"
    {% else %} SELECT 1
    {% end %}

NODE active_days_merged
SQL >
    %
    {% if not defined(granularity) %}
        SELECT
            count(DISTINCT DATE(timestamp)) AS activeDaysCount,
            ROUND(
                COUNT(CASE WHEN activities_filtered.id != '' THEN 1 END)
                * 1.0
                / (
                    SELECT DATEDIFF('day', actual_start_date, actual_end_date) + 1
                    FROM generate_timeseries_bounds
                )
            ) AS avgContributionsPerDay
        FROM activities_filtered
    {% else %} select * from timeseries_generation_for_active_days
    {% end %}
