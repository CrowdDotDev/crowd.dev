NODE health_score_copy_project_repo_deduplicated
DESCRIPTION >
    Returns necessary columns for projects

SQL >
    SELECT id, segmentId, slug, widgets from insightsProjects FINAL WHERE segmentId != ''

NODE health_score_copy_data
SQL >
    SELECT
        health_score_copy_project_repo_deduplicated.id as id,
        health_score_copy_project_repo_deduplicated.segmentId as segmentId,
        health_score_copy_project_repo_deduplicated.slug as slug,
        health_score_copy_project_repo_deduplicated.widgets as widgets,
        health_score_active_contributors.activeContributors as activeContributors,
        health_score_active_contributors.activeContributorsBenchmark as activeContributorsBenchmark,
        health_score_contributor_dependency.contributorDependencyCount as contributorDependencyCount,
        health_score_contributor_dependency.contributorDependencyPercentage
        as contributorDependencyPercentage,
        health_score_contributor_dependency.contributorDependencyBenchmark
        as contributorDependencyBenchmark,
        health_score_organization_dependency.organizationDependencyCount as organizationDependencyCount,
        health_score_organization_dependency.organizationDependencyPercentage
        as organizationDependencyPercentage,
        health_score_organization_dependency.organizationDependencyBenchmark
        as organizationDependencyBenchmark,
        health_score_retention.retentionRate as retentionRate,
        health_score_retention.retentionBenchmark as retentionBenchmark,
        health_score_stars.stars as stars,
        health_score_stars.starsBenchmark as starsBenchmark,
        health_score_forks.forks as forks,
        health_score_forks.forksBenchmark as forksBenchmark,
        health_score_issues_resolution.issueResolution as issueResolution,
        health_score_issues_resolution.issueResolutionBenchmark as issueResolutionBenchmark,
        health_score_pull_requests.pullRequests as pullRequests,
        health_score_pull_requests.pullRequestsBenchmark as pullRequestsBenchmark,
        health_score_merge_lead_time.mergeLeadTime as mergeLeadTime,
        health_score_merge_lead_time.mergeLeadTimeBenchmark as mergeLeadTimeBenchmark,
        health_score_active_days.activeDaysCount as activeDaysCount,
        health_score_active_days.activeDaysBenchmark as activeDaysBenchmark,
        health_score_contributions_outside_work_hours.contributionsOutsideWorkHours
        as contributionsOutsideWorkHours,
        health_score_contributions_outside_work_hours.contributionsOutsideWorkHoursBenchmark
        as contributionsOutsideWorkHoursBenchmark,
        health_score_search_volume.searchVolumeAverage as searchVolumeAverage,
        health_score_search_volume.searchVolumeBenchmark as searchVolumeBenchmark,
        health_score_security.securityCategoryPercentage as securityCategoryPercentage,
        health_score_security.securityPercentage as securityPercentage
    FROM health_score_copy_project_repo_deduplicated
    LEFT JOIN health_score_active_contributors USING (segmentId)
    LEFT JOIN health_score_contributor_dependency USING (segmentId)
    LEFT JOIN health_score_organization_dependency USING (segmentId)
    LEFT JOIN health_score_retention USING (segmentId)
    LEFT JOIN health_score_stars USING (segmentId)
    LEFT JOIN health_score_forks USING (segmentId)
    LEFT JOIN health_score_issues_resolution USING (segmentId)
    LEFT JOIN health_score_pull_requests USING (segmentId)
    LEFT JOIN health_score_merge_lead_time USING (segmentId)
    LEFT JOIN health_score_active_days USING (segmentId)
    LEFT JOIN health_score_contributions_outside_work_hours USING (segmentId)
    LEFT JOIN health_score_search_volume USING (id)
    LEFT JOIN health_score_security USING (id)

NODE health_score_copy_result
SQL >
    WITH
        arrayFilter(
            x -> x >= 0,
            [
                CASE
                    WHEN has(widgets, 'activeContributors') THEN activeContributorsBenchmark ELSE -1
                END,
                CASE
                    WHEN has(widgets, 'contributorDependency')
                    THEN contributorDependencyBenchmark
                    ELSE -1
                END,
                CASE
                    WHEN has(widgets, 'organizationDependency')
                    THEN organizationDependencyBenchmark
                    ELSE -1
                END,
                CASE WHEN has(widgets, 'retention') THEN retentionBenchmark ELSE -1 END
            ]
        ) AS contributorBenchmarks,
        arrayFilter(
            x -> x >= 0,
            [
                CASE WHEN has(widgets, 'stars') THEN starsBenchmark ELSE -1 END,
                CASE WHEN has(widgets, 'forks') THEN forksBenchmark ELSE -1 END,
                CASE
                    WHEN (has(widgets, 'searchQueries') AND searchVolumeAverage > 0)
                    THEN searchVolumeBenchmark
                    ELSE -1
                END
            ]
        ) AS popularityBenchmarks,
        arrayFilter(
            x -> x >= 0,
            [
                CASE WHEN has(widgets, 'issuesResolution') THEN issueResolutionBenchmark ELSE -1 END,
                CASE WHEN has(widgets, 'pullRequests') THEN pullRequestsBenchmark ELSE -1 END,
                CASE WHEN has(widgets, 'mergeLeadTime') THEN mergeLeadTimeBenchmark ELSE -1 END,
                CASE WHEN has(widgets, 'activeDays') THEN activeDaysBenchmark ELSE -1 END,
                CASE
                    WHEN has(widgets, 'contributionsOutsideWorkHours')
                    THEN contributionsOutsideWorkHoursBenchmark
                    ELSE -1
                END
            ]
        ) AS developmentBenchmarks
    SELECT
        *,
        round(
            100.0 * arraySum(contributorBenchmarks) / (5 * length(contributorBenchmarks))
        ) AS contributorPercentage,
        round(
            100.0 * arraySum(popularityBenchmarks) / (5 * length(popularityBenchmarks))
        ) AS popularityPercentage,
        round(
            100.0 * arraySum(developmentBenchmarks) / (5 * length(developmentBenchmarks))
        ) AS developmentPercentage,
        round(
            (contributorPercentage + popularityPercentage + developmentPercentage + securityPercentage)
            / 4
        ) AS overallScore
    FROM health_score_copy_data

TYPE COPY
TARGET_DATASOURCE health_score_copy_ds
COPY_MODE replace
COPY_SCHEDULE 50 0 * * *
