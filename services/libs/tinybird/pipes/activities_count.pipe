DESCRIPTION >
    - `activities_count.pipe` serves activity count analytics for any activity type based on the filtering parameters provided.
    - **When `granularity` is NOT provided, returns a single total count** of all activities matching the specified filters across the entire time range.
    - **When `granularity` is provided, returns time-series data** showing activity counts aggregated by different time periods (daily, weekly, monthly, quarterly, yearly).
    - Uses `generate_timeseries` pipe to create consistent time periods and left joins activity data to handle periods with zero activity.
    - Primary use cases: activity trend charts (with granularity) and total activity counts for any activity type analytics (without granularity).
    - Parameters:
    - `project`: Inherited from `segments_filtered`, project slug (e.g., 'k8s', 'tensorflow')
    - `repos`: Inherited from `segments_filtered`, array of repository URLs for filtering
    - `startDate`: Optional DateTime filter for activities after timestamp (e.g., '2024-01-01 00:00:00')
    - `endDate`: Optional DateTime filter for activities before timestamp (e.g., '2024-12-31 23:59:59')
    - `repos`: Optional array of repository URLs (e.g., ['https://github.com/kubernetes/kubernetes'])
    - `platform`: Optional string filter for source platform (e.g., 'github', 'discord', 'slack')
    - `activity_type`: Optional string filter for single activity type (e.g., 'authored-commit')
    - `activity_types`: Optional array of activity types (e.g., ['authored-commit', 'co-authored-commit'])
    - `onlyContributions`: Optional boolean, defaults to 1 (contributions only), set to 0 for all activities
    - `granularity`: Optional string for time aggregation ('daily', 'weekly', 'monthly', 'quarterly', 'yearly')
    - Response:
    - Without granularity: `activityCount` (total count)
    - With granularity: `startDate`, `endDate`, and `activityCount` for each time period

TAGS "Widget", "Activity metrics"

NODE timeseries_generation_for_activity_count
SQL >
    %
    {% set onlyContributions = False %}
    {% if defined(granularity) %}
        SELECT
            ds."startDate",
            ds."endDate",
            count(case when af.id != '' then af.id else null end) AS "activityCount"
        FROM generate_timeseries ds
        LEFT JOIN
            activities_filtered af
            ON CASE
                WHEN {{ granularity }} = 'daily'
                THEN toDate(af.timestamp)
                WHEN {{ granularity }} = 'weekly'
                THEN toStartOfWeek(af.timestamp)
                WHEN {{ granularity }} = 'monthly'
                THEN toStartOfMonth(af.timestamp)
                WHEN {{ granularity }} = 'quarterly'
                THEN toStartOfQuarter(af.timestamp)
                WHEN {{ granularity }} = 'yearly'
                THEN toStartOfYear(af.timestamp)
            END
            = ds."startDate"
        GROUP BY ds."startDate", ds."endDate"
        order by ds."startDate"
    {% else %} SELECT 1
    {% end %}

NODE activity_count_merged
SQL >
    %
    {% if not defined(granularity) %}
        SELECT
            count(
                case when activities_filtered.id != '' then activities_filtered.id else null end
            ) AS activityCount
        FROM activities_filtered
    {% else %} select * from timeseries_generation_for_activity_count
    {% end %}
