DESCRIPTION >
    - `active_organizations.pipe` serves the active organizations widget showing unique organization counts over time or as totals.
    - **Organizations are considered active when they have an activity with their organizationId matching the given filters** within the time period.
    - **When `granularity` is NOT provided, returns total unique organization count** for the specified filters.
    - **When `granularity` is provided, returns time-series data** showing unique organization counts for each time period.
    - Parameters:
    - `project`: Required string for project slug (e.g., 'k8s', 'tensorflow') - inherited from `segments_filtered`
    - `repos`: Optional array of repository URLs for filtering (inherited from `segments_filtered`)
    - `startDate`: Optional DateTime filter for activities after timestamp (e.g., '2024-01-01 00:00:00')
    - `endDate`: Optional DateTime filter for activities before timestamp (e.g., '2024-12-31 23:59:59')
    - `repos`: Optional array of repository URLs (e.g., ['https://github.com/kubernetes/kubernetes'])
    - `platform`: Optional string filter for source platform (e.g., 'github', 'discord', 'slack')
    - `activity_type`: Optional string filter for single activity type (e.g., 'authored-commit')
    - `activity_types`: Optional array of activity types (e.g., ['authored-commit', 'co-authored-commit'])
    - `onlyContributions`: Optional boolean, defaults to 1 (contributions only), set to 0 for all activities
    - `granularity`: Optional string for time aggregation ('daily', 'weekly', 'monthly', 'quarterly', 'yearly')
    - Response:
    - Without granularity: `organizationCount` (total unique organizations)
    - With granularity: `startDate`, `endDate`, and `organizationCount` for each time period

TAGS "Widget", "Organizations", "Active users"

NODE timeseries_generation_for_active_organizations
SQL >
    %
    {% if defined(granularity) %}
        SELECT
            ds."startDate",
            ds."endDate",
            COALESCE(
                uniq(case when af.organizationId != '' then af.organizationId else null end), 0
            ) AS "organizationCount"
        FROM generate_timeseries ds
        LEFT JOIN
            activities_filtered af
            ON CASE
                WHEN {{ granularity }} = 'daily'
                THEN toDate(af.timestamp)
                WHEN {{ granularity }} = 'weekly'
                THEN toStartOfWeek(af.timestamp)
                WHEN {{ granularity }} = 'monthly'
                THEN toStartOfMonth(af.timestamp)
                WHEN {{ granularity }} = 'quarterly'
                THEN toStartOfQuarter(af.timestamp)
                WHEN {{ granularity }} = 'yearly'
                THEN toStartOfYear(af.timestamp)
            END
            = ds."startDate"
        GROUP BY ds."startDate", "endDate"
        ORDER BY ds."startDate" ASC
    {% else %} select 1
    {% end %}

NODE active_organizations_merged
SQL >
    %
    {% if not defined(granularity) %}
        SELECT
            uniq(case when organizationId != '' then organizationId else null end) AS organizationCount
        FROM activities_filtered
    {% else %} select * from timeseries_generation_for_active_organizations
    {% end %}
