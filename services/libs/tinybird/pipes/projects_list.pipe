TOKEN "projects_list_endpoint_read_5981" READ

NODE projects_paginated
SQL >

    %
    SELECT * FROM insightsProjects_filtered
    order by insightsProjects_filtered.name asc
    LIMIT {{Int32(pageSize, 10)}}
    OFFSET {{Int32(page, 0) * Int32(pageSize, 10)}}



NODE projects_repositories
SQL >

    SELECT
      activityRepositories_filtered.* 
    from activityRepositories_filtered
    join collectionsInsightsProjects on collectionsInsightsProjects.insightsProjectId = activityRepositories_filtered.projectId
    where (
     collectionsInsightsProjects.insightsProjectId in (
         select id from projects_paginated
      )
    )



NODE segments_filtered
SQL >

    %
    SELECT id, "segmentId" FROM insightsProjects FINAL
    where id in (select id from projects_paginated )





NODE aggregates_for_projects
SQL >

    SELECT "segmentId",
           count(distinct "memberId") as "contributorsCount", 
           count(distinct "organizationId") as "organizationsCount" 
    FROM activityRelations
    where "segmentId" in (select "segmentId" from segments_filtered)
    group by "segmentId"



NODE merging_fields_together
SQL >

    %
    {% if Boolean(count, false) %}
    SELECT count(insightsProjects_filtered.id) from insightsProjects_filtered
    {% else %}
    SELECT 
        projects_paginated.id as id,
        projects_paginated.name as name,
        projects_paginated.slug as slug,
        projects_paginated.description as description,
        projects_paginated.logo as logo,
        aggregates_for_projects."contributorsCount" as "contributorsCount",
        aggregates_for_projects."organizationsCount" as "organizationsCount",
        arrayFilter(
            x -> x['repo'] != '',  -- âœ… Removes objects with empty 'name'
            groupArray(
                map(
                    'projectId', toString(projects_repositories.projectId),
                    'projectName', toString(projects_repositories.projectName),
                    'projectSlug', toString(projects_repositories.projectSlug),
                    'repo',        toString(projects_repositories.repo)
                )
            )
        ) AS repositories
    FROM projects_paginated
    LEFT JOIN aggregates_for_projects 
        ON aggregates_for_projects.segmentId = projects_paginated.segmentId
    LEFT JOIN projects_repositories
        ON projects_repositories.projectId = projects_paginated.id
    GROUP BY 1,2,3,4,5,6,7
    {% end %}


