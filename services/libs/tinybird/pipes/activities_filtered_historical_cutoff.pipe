DESCRIPTION >
	The only difference between the activities_filtered pipe and this pipe is that this version returns all activities up until the specified startDate, effectively reversing the time range filter. This approach is useful as it retains support for additional filters and is primarily used in the activities_cumulative_counts pipeline to obtain the historical total.


TOKEN "insights-app-token" READ

TOKEN "activities_filtered_historical_cutoff_endpoint_read_5308" READ

NODE segments_filtered
SQL >

    %
        SELECT "segmentId" as id, repositories FROM insightsProjects FINAL
        where 1=1
        {% if defined(project) %}
        AND slug = {{String(project, description="Filter by project slug", required=True)}}
        {% else %}
        AND false
        {% end %}  
        {% if defined(repo) %}
        AND has(insightsProjects.repositories, {{String(repo, description="Filter activity repo", required=False)}})
        {% end %}



NODE activities_filtered_by_timestamp_and_channel
SQL >

    %
        SELECT id, type, timestamp, channel, platform FROM activities_sorted a
        where 1=1
        {% if defined(startDate) %}
        AND a.timestamp <= {{DateTime(startDate, description="Filter activity timestamp after", required=False)}}
        {% else %}
        AND false
        {% end %}
        {% if defined(repo) %}
        AND a.channel = {{String(repo, description="Filter activity repo", required=False)}}
        {% end %}
        {% if defined(platform) %}
        AND a.platform = {{String(platform, description="Filter activity platform", required=False)}}
        {% end %}
        {% if not defined (onlyContributions) or (defined(onlyContributions) and onlyContributions ==  1) %}
        AND a.isContribution
        {% end %}
        {% if defined(activity_type) %}
        AND a.type = {{String(activity_type, description="Filter activity type", required=False)}}
        {% end %}



NODE activity_relations_filtered
SQL >

    %
    SELECT
        a.id,
        a.timestamp,
        a.type,
        a.platform,
        ar.memberId,
        ar.organizationId,
        ar.segmentId
    FROM activities_filtered_by_timestamp_and_channel a
    ANY INNER JOIN (
        SELECT activityId, memberId, organizationId, segmentId
        FROM activityRelations_sorted
        WHERE segmentId IN (SELECT id FROM segments_filtered) 
    ) ar ON ar.activityId = a.id



