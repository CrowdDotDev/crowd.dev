DESCRIPTION >
    - `activities_cumulative_count.pipe` provides cumulative activity count analytics showing the running total of activities over time.
    - **Key difference from `activities_count.pipe`:** Returns cumulative/running totals instead of period-specific counts, showing growth over time rather than activity per period.
    - **When `granularity` is NOT provided, returns a simple count from `activities_filtered_historical_cutoff`** (same behavior as `activities_filtered` for totals).
    - **When `granularity` is provided, returns time-series data** with cumulative activity counts calculated by adding historical baseline + period-specific counts.
    - Cumulative calculation: historical total (from `activities_filtered_historical_cutoff`) + rolling sum of period activities to create running totals over time.
    - Each cumulative count includes all matching activities from project inception up to that time period.
    - Primary use case: showing growth trends and total activity accumulation over time in dashboard widgets.
    - Parameters:
    - `project`: Inherited from `segments_filtered`, project slug (e.g., 'k8s', 'tensorflow')
    - `repos`: Inherited from `segments_filtered`, array of repository URLs for filtering
    - `startDate`: Optional DateTime filter for activities after timestamp (e.g., '2024-01-01 00:00:00')
    - `endDate`: Optional DateTime filter for activities before timestamp (e.g., '2024-12-31 23:59:59')
    - `repos`: Optional array of repository URLs (e.g., ['https://github.com/kubernetes/kubernetes'])
    - `platform`: Optional string filter for source platform (e.g., 'github', 'discord', 'slack')
    - `activity_type`: Optional string filter for single activity type (e.g., 'authored-commit')
    - `activity_types`: Optional array of activity types (e.g., ['authored-commit', 'co-authored-commit'])
    - `onlyContributions`: Optional boolean, defaults to 1 (contributions only), set to 0 for all activities
    - `granularity`: Optional string for time aggregation ('daily', 'weekly', 'monthly', 'quarterly', 'yearly')
    - Response:
    - Without granularity: Simple count from `activities_filtered_historical_cutoff`
    - With granularity: `startDate`, `endDate`, and `cumulativeActivityCount` for each time period

TAGS "Widget", "Cumulative metrics", "Growth trends"

NODE historical_activity_count
SQL >
    %
    select count(*) from activities_filtered_historical_cutoff

NODE cumulative_activity_count
SQL >
    %
    {% if defined(granularity) %}
        WITH
            base AS (
                SELECT
                    ds."startDate",
                    ds."endDate",
                    count(case when af.id != '' then af.id else null end) AS "activityCount"
                FROM generate_timeseries ds
                LEFT JOIN
                    activities_filtered af
                    ON CASE
                        WHEN {{ granularity }} = 'daily'
                        THEN toDate(af.timestamp)
                        WHEN {{ granularity }} = 'weekly'
                        THEN toStartOfWeek(af.timestamp)
                        WHEN {{ granularity }} = 'monthly'
                        THEN toStartOfMonth(af.timestamp)
                        WHEN {{ granularity }} = 'quarterly'
                        THEN toStartOfQuarter(af.timestamp)
                        WHEN {{ granularity }} = 'yearly'
                        THEN toStartOfYear(af.timestamp)
                    END
                    = ds."startDate"
                GROUP BY ds."startDate", ds."endDate"
            ),
            rolling_cumulative AS (
                SELECT
                    "startDate",
                    "endDate",
                    "activityCount",
                    sumState("activityCount") AS "cumulativeState"
                FROM base
                GROUP BY "startDate", "endDate", "activityCount"
            )
        SELECT
            "startDate",
            "endDate",
            COALESCE(sumMerge(cumulativeState) OVER (ORDER BY "startDate" ASC), 0)
            + (select count(*) from activities_filtered_historical_cutoff) AS "cumulativeActivityCount"
        FROM rolling_cumulative
        ORDER BY "startDate" ASC
    {% else %} SELECT 1
    {% end %}
