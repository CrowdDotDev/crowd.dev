DESCRIPTION >
    - `generate_timeseries.pipe` provides standardized time-series date ranges for all time-series analytics pipes across the platform.
    - **Requires `granularity` parameter** to determine the time period intervals (daily, weekly, monthly, quarterly, yearly).
    - Generates consistent date ranges with proper period boundaries for each granularity level.
    - Uses `generate_timeseries_bounds` pipe to determine the overall time range and creates discrete time periods within that range.
    - Handles period boundary calculations correctly (e.g., weekly periods run Monday-Sunday, monthly periods span full months).
    - Generates up to 1000 time periods using ClickHouse's `numbers()` function for comprehensive time-series coverage.
    - Primary use case: serving as the foundational time-series infrastructure for all activity, contributor, and metric analytics.
    - Parameters:
    - `granularity`: Required string for time period intervals ('daily', 'weekly', 'monthly', 'quarterly', 'yearly')
    - Inherits time range parameters from `generate_timeseries_bounds`: `startDate`, `endDate`, and activity filters
    - Response: `startDate`, `endDate` for each time period within the specified granularity and date range

TAGS "Utility", "Time-series", "Infrastructure", "Date generation"

NODE generate_timeseriez
SQL >
    %
    SELECT DISTINCT
        CASE
            WHEN {{ granularity }} = 'daily'
            THEN toDate(addDays(generate_timeseries_bounds.actual_start_date, number))
            WHEN {{ granularity }} = 'weekly'
            THEN toStartOfWeek(addDays(generate_timeseries_bounds.actual_start_date, number * 7))
            WHEN {{ granularity }} = 'monthly'
            THEN toStartOfMonth(addMonths(generate_timeseries_bounds.actual_start_date, number))
            WHEN {{ granularity }} = 'quarterly'
            THEN toStartOfQuarter(addMonths(generate_timeseries_bounds.actual_start_date, number * 3))
            WHEN {{ granularity }} = 'yearly'
            THEN toStartOfYear(addYears(generate_timeseries_bounds.actual_start_date, number))
        END AS "startDate",
        CASE
            WHEN {{ granularity }} = 'daily'
            THEN toDate(addDays(actual_start_date, number))
            WHEN {{ granularity }} = 'weekly'
            THEN toDate(toStartOfWeek(addDays(actual_start_date, number * 7)) + INTERVAL 6 DAY)
            WHEN {{ granularity }} = 'monthly'
            THEN
                toDate(
                    toStartOfMonth(addMonths(actual_start_date, number))
                    + INTERVAL 1 MONTH
                    - INTERVAL 1 DAY
                )
            WHEN {{ granularity }} = 'quarterly'
            THEN
                toDate(
                    toStartOfQuarter(addMonths(actual_start_date, number * 3))
                    + INTERVAL 3 MONTH
                    - INTERVAL 1 DAY
                )
            WHEN {{ granularity }} = 'yearly'
            THEN
                toDate(
                    toStartOfYear(addYears(actual_start_date, number))
                    + INTERVAL 1 YEAR
                    - INTERVAL 1 DAY
                )
        END AS "endDate"
    FROM numbers(1000)
    CROSS JOIN
        (
            SELECT
                CASE
                    WHEN {{ granularity }} = 'weekly'
                    THEN toStartOfWeek(actual_start_date)
                    WHEN {{ granularity }} = 'monthly'
                    THEN toStartOfMonth(actual_start_date)
                    WHEN {{ granularity }} = 'quarterly'
                    THEN toStartOfQuarter(actual_start_date)
                    WHEN {{ granularity }} = 'yearly'
                    THEN toStartOfYear(actual_start_date)
                    ELSE actual_start_date
                END AS actual_start_date,
                actual_end_date
            FROM generate_timeseries_bounds
        ) generate_timeseries_bounds
    WHERE "startDate" >= actual_start_date AND "startDate" < actual_end_date
