DESCRIPTION >
    - `activities_enriched.pipe` provides a filtered and optionally paginated view of activity relations, then enriches those rows with content fields from the activities dataset.
    - This pipe powers endpoints that need both relation metadata and activity content (url/body/title) without performing a full join on large tables.
    - It filters from `activityRelations_deduplicated_ds` by project segment, time ranges, repositories, platforms, and activity types, then joins only the small, filtered set against `activities_deduplicated_ds`.
    - By default, this pipe returns only contribution activities (`isContribution = 1`) unless explicitly overridden with `onlyContributions = 0`.
    - Security / scoping: if you use a `segments_filtered` pipe in your environment, replace the `segmentId` filter to read from it (see comment in Node 1).
    - Parameters:
    - `segments`: Optional array of segment IDs (e.g., ['7c3f6874-b10e-499b-a672-00281ab6c510']). If you use `segments_filtered`, remove this and rely on that pipe.
    - `startDate`: Optional DateTime to filter activities after (e.g., '2024-01-01 00:00:00').
    - `endDate`: Optional DateTime to filter activities before (e.g., '2024-12-31 23:59:59').
    - `repos`: Optional array of repository URLs (e.g., ['https://github.com/apache/dubbo']).
    - `platform`: Optional string filter for source platform (e.g., 'github', 'discord', 'slack').
    - `activity_type`: Optional string filter for a single activity type (e.g., 'star', 'authored-commit').
    - `activity_types`: Optional array of activity types.
    - `onlyContributions`: Optional boolean, defaults to 1 (contributions only), set to 0 for all activities.
    - `page`: Optional integer page index for pagination (OFFSET-based), defaults to 0.
    - `pageSize`: Optional integer page size, defaults to 10.
    - Response (final node): all relation fields from Node 1 plus `url`, `body`, `title` from activities.
    - Performance:
    - The enrichment only scans the subset of `activities_deduplicated_ds` whose `id` is found in the filtered page from Node 1, minimizing I/O.
    - Keep page sizes reasonable (50–200) for consistent latency.
    - Ensure `activityId` and `id` types are aligned (both UUID or both String). If they differ, this pipe casts to String at join time.

NODE activities_enriched_filter_v1
SQL >
    %
    -- Parameters (all optional unless stated):
    -- segments: Array(String)  [REQUIRED]  → project scope
    -- startDate, endDate: DateTime         → filter by ar.timestamp
    -- repos: Array(String)                  → ar.channel IN repos
    -- platform: String                      → ar.platform
    -- activity_type: String                 → ar.type = <single>
    -- activity_types: Array(String)         → ar.type IN <many>
    -- conversationIds: Array(String)        → ar.sourceParentId IN (...)
    -- sourceIds: Array(String)              → ar.sourceId IN (...)
    -- onlyContributions: UInt8 (default 1)  → include only ar.isContribution
    -- orderBy: String (timestamp_DESC|timestamp_ASC|createdAt_DESC|createdAt_ASC)
    -- page: Int32 (default 0)
    -- pageSize: Int32 (default 10)
    -- memberIsTeamMember: UInt8 (0/1)
    -- memberIsBot: UInt8 (0/1)
    SELECT
        ar.activityId AS id,
        ar.channel,
        ar.isContribution,
        ar.memberId,
        ar.organizationId,
        ar.platform,
        ar.segmentId,
        ar.sourceId,
        ar.sourceParentId,
        ar.timestamp,
        ar.type
    -- , ar.createdAt (if you want to expose createdAt too)
    FROM activityRelations_deduplicated_ds AS ar
    WHERE
        ar.segmentId IN {{ Array(segments, 'String', required=True, description="Segment IDs") }}
        {% if defined(startDate) %} AND ar.timestamp > {{ DateTime(startDate) }} {% end %}
        {% if defined(endDate) %} AND ar.timestamp < {{ DateTime(endDate) }} {% end %}
        {% if defined(repos) %} AND ar.channel IN {{ Array(repos, 'String') }} {% end %}
        {% if defined(platform) %} AND ar.platform = {{ String(platform) }} {% end %}
        {% if defined(onlyContributions) and onlyContributions == 1 %} AND ar.isContribution {% end %}
        {% if defined(activity_type) %} AND ar.type = {{ String(activity_type) }} {% end %}
        {% if defined(activity_types) %} AND ar.type IN {{ Array(activity_types, 'String') }} {% end %}
        {% if defined(conversationIds) %}
            AND ar.sourceParentId IN {{ Array(conversationIds, 'String') }}
        {% end %}
        {% if defined(sourceIds) %} AND ar.sourceId IN {{ Array(sourceIds, 'String') }} {% end %}
        {% if (defined(memberIsTeamMember) or defined(memberIsBot)) %}
            AND ar.memberId IN (
                SELECT id
                FROM members_sorted
                WHERE
                    1
                    {% if defined(memberIsTeamMember) %}
                        AND isTeamMember = {{ UInt8(memberIsTeamMember) }}
                    {% end %}
                    {% if defined(memberIsBot) %} AND isBot = {{ UInt8(memberIsBot) }} {% end %}
            )
        {% end %}
    {% if defined(orderBy) %}
        {% if orderBy == 'timestamp_ASC' %} ORDER BY ar.timestamp ASC, ar.activityId ASC
        {% elif orderBy == 'createdAt_ASC' %} ORDER BY ar.timestamp ASC, ar.activityId ASC
        {% elif orderBy == 'createdAt_DESC' %} ORDER BY ar.timestamp DESC, ar.activityId DESC
        {% else %} ORDER BY ar.timestamp DESC, ar.activityId DESC
        {% end %}
    {% else %} ORDER BY ar.timestamp DESC, ar.activityId DESC
    {% end %}
    LIMIT {{ Int32(pageSize, 10) }}
    OFFSET {{ Int32(page, 0) * Int32(pageSize, 10) }}

NODE activities_enriched_v1
SQL >
    %
    {% if defined(countOnly) and countOnly == 1 %}
        SELECT countDistinct(fr.id) AS count FROM filtered_relations fr
    {% else %}
        SELECT
            fr.id,
            fr.channel,
            fr.isContribution,
            fr.memberId,
            fr.organizationId,
            fr.platform,
            fr.segmentId,
            fr.sourceId,
            fr.sourceParentId,
            fr.timestamp,
            fr.type,
            a.attributes,
            a.url,
            a.body,
            a.title
        FROM filtered_relations AS fr ANY
        LEFT JOIN
            (
                SELECT CAST(id AS String) AS activity_id, attributes, url, body, title
                FROM activities_deduplicated_ds
                WHERE CAST(id AS String) IN (SELECT DISTINCT CAST(id AS String) FROM filtered_relations)
            ) AS a
            ON CAST(fr.id AS String) = a.activity_id
    {% end %}
