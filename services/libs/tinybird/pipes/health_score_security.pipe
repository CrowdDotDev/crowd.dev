TOKEN "health_score_security_endpoint_read_2389" READ

NODE health_score_security_project_repos
SQL >
    SELECT id, repo AS repo FROM insightsProjects FINAL ARRAY JOIN repositories AS repo

NODE health_score_security_check_pass_rate
SQL >
    SELECT
        id,
        repo,
        category,
        controlId,
        arrayFilter(
            -- Hiding specific checks from evaluation
            x -> x['requirementId'] not in ('OSPS-AC-01.01'), assessments
        ) as filteredAssessments,
        length(arrayFilter(x -> x['result'] = 'Failed', filteredAssessments)) AS failedAssessments,
        length(arrayFilter(x -> x['result'] = 'Passed', filteredAssessments)) AS passedAssessments
    FROM security_deduplicated_merged_ds
    LEFT JOIN health_score_security_project_repos USING (repo)
    WHERE category not in ('Documentation', 'Vulnerability Management')

NODE health_score_security_category_pass_rate
SQL >
    SELECT
        id,
        category,
        sum(failedAssessments) as failed,
        sum(passedAssessments) as passed,
        sum(failedAssessments + passedAssessments) as total,
        round(100 * (passed / total)) as percentage
    FROM health_score_security_check_pass_rate
    WHERE id != ''
    GROUP BY id, category

NODE health_score_security_score
SQL >
    SELECT
        id,
        groupArray((category, percentage)) AS securityCategoryPercentage,
        round(avg(percentage)) as securityPercentage
    FROM health_score_security_category_pass_rate
    GROUP BY id

NODE health_score_security_repo_category_pass_rate
SQL >
    SELECT
        id,
        repo,
        category,
        sum(failedAssessments) as failed,
        sum(passedAssessments) as passed,
        sum(failedAssessments + passedAssessments) as total,
        round(100 * (passed / total)) as percentage
    FROM health_score_security_check_pass_rate
    WHERE id != '' AND repo != ''
    GROUP BY id, repo, category

NODE health_score_security_repo_score
SQL >
    SELECT
        id,
        repo,
        groupArray((category, percentage)) AS securityCategoryPercentage,
        round(avg(percentage)) as securityPercentage
    FROM health_score_security_repo_category_pass_rate
    GROUP BY id, repo

NODE health_score_security_union
SQL >
    SELECT id, '' as repo, securityCategoryPercentage, securityPercentage
    FROM health_score_security_score
    UNION ALL
    SELECT id, repo, securityCategoryPercentage, securityPercentage
    FROM health_score_security_repo_score
