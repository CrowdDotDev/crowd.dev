DESCRIPTION >
    - `organizations_geo_distribution.pipe` serves the organization geographic distribution widget showing organization counts by country.
    - Maps organization locations to countries using fuzzy matching with the `country_mapping` lookup table.
    - Handles unknown/unmappable locations by grouping them under "Unknown" with ❓ flag and 'XX' country code.
    - Calculates both absolute organization counts and percentage distribution for visualization.
    - Primary use case: displaying geographic diversity of organizations in project insights.
    - Parameters:
    - `project`: Required string for project slug (e.g., 'k8s', 'tensorflow') - inherited from `segments_filtered`
    - `repos`: Optional array of repository URLs for filtering (inherited from `segments_filtered`)
    - `startDate`: Optional DateTime filter for activities after timestamp (e.g., '2024-01-01 00:00:00')
    - `endDate`: Optional DateTime filter for activities before timestamp (e.g., '2024-12-31 23:59:59')
    - `repos`: Optional array of repository URLs (e.g., ['https://github.com/kubernetes/kubernetes'])
    - `platform`: Optional string filter for source platform (e.g., 'github', 'discord', 'slack')
    - `activity_type`: Optional string filter for single activity type (e.g., 'authored-commit')
    - `activity_types`: Optional array of activity types (e.g., ['authored-commit', 'co-authored-commit'])
    - `onlyContributions`: Optional boolean, defaults to 1 (contributions only), set to 0 for all activities
    - Response: `country`, `flag`, `country_code`, `organizationCount`, `organizationPercentage`

TAGS "Widget", "Geography", "Organizations"

NODE country_mapping_array
SQL >
    SELECT groupArray((country, flag, country_code)) AS country_data FROM country_mapping

NODE parsed_country
SQL >
    SELECT
        o.id,
        o.location,
        arrayFilter(
            x -> position(upper(o.location), upper(x .1)) > 0,
            (SELECT country_data FROM country_mapping_array)
        ) AS matched_countries,
        arrayJoin(
            if(empty(matched_countries), [('Unknown', '❓', 'XX')], matched_countries)
        ) AS country_data
    FROM organizations AS o final
    WHERE o.id IN (SELECT "organizationId" FROM activities_filtered)

NODE organizations_geo_distribution_result
SQL >
    SELECT
        country_data .1 AS country,
        country_data .2 AS flag,
        country_data .3 AS country_code,
        COUNT(id) AS organizationCount,
        round(
            (count(id) / (select "organizationCount" from active_organizations)) * 100
        ) as "organizationPercentage"
    FROM parsed_country
    GROUP BY country, flag, country_code
    ORDER BY organizationCount DESC
