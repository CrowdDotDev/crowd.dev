profile = "chat/messages-threads@1.0"
provider = "slack"

"""
GetMessagesThreads map
"""
map GetMessagesThreads {
	http GET "/conversations.replies" {
		request "application/x-www-form-urlencoded" {
			query {
				channel = input.destination
				ts = input.threadId
				oldest = input.afterTimestamp
				cursor = input.page
				limit = input.limit || 100
			}

			headers {
				"Authorization" = `Bearer ${parameters.accessToken}`
			}
		}

		response 200 "application/json" {
			error = call MapSlackError(
				statusCode = statusCode,
				error = body,
				headers = headers,
			) if (!body.ok)

			return map error if (!body.ok) error

			messages = call MapMessages(
				messages = body.messages,
				destination = input.destination,
			)

			rateLimit = call MapRateLimitDetails(headers = headers)

			result = { messages: messages }

			set if (body.has_more) {
				result.nextPage = body.response_metadata.next_cursor
			}

			set if (rateLimit) {
				result.rateLimit = rateLimit
			}

			map result result
		}

		response {
			error = call MapSlackError(
				statusCode = statusCode,
				error = body,
				headers = headers,
			)
			
			map error error
		}
	}
}

operation MapMessages {
	listOfMessages = []

	set if (args.messages && args.messages.length > 0) {
		listOfMessages = args.messages.filter(message => message.type === 'message')
	}

	// workaround for map interpreter variables merging issue
	listOfMessages = call foreach(index of Array(listOfMessages.length).fill().map((_, i) => i)) MapMessage(
		index = index,
		messages = listOfMessages,
		dest = args.destination,
	) if (listOfMessages.length > 0)

	return listOfMessages
}

operation MapMessage {
	index = args.index
	message = args.messages[index]

	messageResult = {
		id: message.ts,
		text: message.text,
		createdAt: parseFloat(message.ts),
	}

	set if(message.user || message.bot_id) {
		messageResult.author = {
			id: message.user || message.bot_id,
			username: message.username
		}
	}

	set if (message.thread_ts) {
		messageResult.hasThread = true
		messageResult.threadId = message.thread_ts;
	}

	set if (message.edited) {
		messageResult.updatedAt = parseFloat(message.edited.ts);
	}

	set if (message.reactions) {
		messageResult.reactions = message.reactions.map(reaction => ({
			emoji: reaction.name,
			count: reaction.count,
			users: reaction.users
		}))
	}

	set if (message.files && message.files.length > 0) {
		messageResult.attachments = message.files.map(file => ({
			id: file.id,
			createdAt: file.created,
			fileName: file.name,
			mediaType: file.mimetype,
			url: file.permalink_public,
			preview: file.preview,
		}))
	}

	messageResult.url = call ComposeURL(ts = message.ts, dest = args.dest)

	return messageResult
}

"""
Operation MapRateLimitDetails
Returns object mapping rate limit details specified in received headers
"""
operation MapRateLimitDetails {
	headers = args.headers
	details = {}

	totalRequests = parseInt(headers['X-Rate-Limit-Limit'])
	remainingRequests = parseInt(headers['X-Rate-Limit-Remaining'])
	resetAfter = parseInt(headers['X-Rate-Limit-Reset'])
	retryAfter = parseInt(headers['Retry-After'])

	set if (!isNaN(totalRequests)) {
		details.totalRequests = totalRequests
	}

	set if (!isNaN(remainingRequests)) {
		details.remainingRequests = remainingRequests
	}

	set if (!isNaN(resetAfter)) {
		details.resetAfter = resetAfter
		details.resetTimestamp = Date.now() + (resetAfter * 1000)
	}

	set if (!isNaN(retryAfter)) {
		details.retryAfter = retryAfter
	}

	set if (details.remainingRequests && details.totalRequests) {
		details.remainingRequestsPercentage = (details.remainingRequests / details.totalRequests) * 100
	}

	set if (Object.keys(details).length === 0) {
		details = undefined
	}

	return details
}

operation ComposeURL {
	timestamp = args.ts
	destination = args.dest

	return `https://slack.com/api/conversations.history?channel=${destination}&latest=${timestamp}&inclusive=true&limit=1`
}

"""
Operation Map Slack Error
Returns error object based on error body, statusCode and headers.
See https://api.slack.com/methods/conversations.history#errors for more information about errors
"""
operation MapSlackError {
	statusCode = args.statusCode
	slackError = args.error
	headers = args.headers

	rateLimit = call MapRateLimitDetails(headers = headers)
	detail = slackError.error

	return if (statusCode === 200) {
		title = detail
		rateLimit = rateLimit
	}

	return if (statusCode === 400) {
		title = 'Bad request'
		detail = slackError
		rateLimit = rateLimit
	}

	return if (statusCode === 401) {
		title = 'Unauthorized'
		detail = detail
		rateLimit = rateLimit
	}

	return if (statusCode === 403) {
		title = 'Forbidden'
		detail = detail
		rateLimit = rateLimit
	}

	return if (statusCode === 404) {
		title = 'Not found'
		detail = detail
		rateLimit = rateLimit
	}

	return if (statusCode === 405) {
		title = 'Method not allowed'
		detail = detail
		rateLimit = rateLimit
	}

	return if (statusCode === 429) {
		title = 'Too Many Requests'
		detail = `Retry after ${headers['Retry-After']} seconds`
		rateLimit = rateLimit
	}

	return if (statusCode === 502) {
		title = 'Bad gateway'
		detail = detail
		rateLimit = rateLimit
	}

	return {
		title = 'Unknown error'
		detail = `Unknown error occurred. Status: ${statusCode}. Code: ${detail}.`
		rateLimit = rateLimit
	}
}
