profile = "chat/messages@1.0"
provider = "slack"

"""
GetMessages map
"""
map GetMessages {
  http GET "/conversations.history" {
    request "application/x-www-form-urlencoded" {
      query {
        channel = input.destination
        latest = input.beforeTimestamp
        oldest = input.afterTimestamp
        cursor = input.page
        limit = input.limit || 999
      }

      headers {
        "Authorization" = `Bearer ${parameters.accessToken}`
      }
    }

    response 200 "application/json" {
      error = call MapSlackError(
        statusCode = statusCode,
        error = body,
        headers = headers,
      ) if (!body.ok)

      return map error if (!body.ok) error

      messages = call MapMessages(
        messages = body.messages,
        destination = input.destination,
      )

      rateLimit = call MapRateLimitDetails(headers = headers)
      result.messages = messages

      set if (body.has_more) {
        result.nextPage = body.response_metadata.next_cursor
      }

      set if (rateLimit) {
        result.rateLimit = rateLimit
      }

      map result result
    }

    response {
      error = call MapSlackError(
        statusCode = statusCode,
        error = body,
        headers = headers,
      )
      
      map error error
    }
  }
}

operation MapMessages {
  messages = args.messages.reduce((acc, message) => {
    if (message.type === 'message') {
      const resultMessage = {
        id: message.ts,
        text: message.text,
        createdAt: parseFloat(message.ts) * 1000,
      }
  
      let author, reactions = [], attachments = [];
  
      if (message.user || message.bot_id) {
        author = {
          id: message.user || message.bot_id,
          username: message.username
        };
  
        resultMessage.author = author;
      }
  
      if (message.thread_ts) {
        resultMessage.hasThread = true;
        resultMessage.threadId = message.thread_ts;
      }
  
      if (message.edited) {
        resultMessage.updatedAt = parseFloat(message.edited.ts) * 1000;
      }
  
      if (message.reactions) {
        reactions = message.reactions.map(reaction => ({
          emoji: reaction.name,
          count: reaction.count,
          users: reaction.users,
        }));
  
        resultMessage.reactions = reactions;
      }
  
      if (message.files) {
        attachments = message.files.reduce((attachAcc, file) => {
          if (file.created !== undefined) {
            attachAcc.push({
              id: file.id,
              createdAt: file.created,
              fileName: file.name,
              mediaType: file.mimetype,
              url: file.permalink_public,
              preview: file.preview,
            });
          }

          return attachAcc;
		    }, []);
  
        resultMessage.attachments = attachments;
      }
  
      // TODO: implement composing URL
      // BLOCKER: unknown workspace name
      // Format of public URL:          https://<workspace-name>.slack.com/archives/<channel-id>/p<processed-message-id>
      // Format of URL poiting to API:  https://slack.com/api/conversations.history?channel=<channel-id>&latest=<message-id>&inclusive=true&limit=1
  
      acc.push(resultMessage);
    }

    return acc;
  }, []);

  return messages
}

"""
Operation MapRateLimitDetails
Returns object mapping rate limit details specified in received headers
"""
operation MapRateLimitDetails {
  headers = args.headers
  details = {}

  totalRequests = parseInt(headers['X-Rate-Limit-Limit'])
  remainingRequests = parseInt(headers['X-Rate-Limit-Remaining'])
  resetAfter = parseInt(headers['X-Rate-Limit-Reset'])
  retryAfter = parseInt(headers['Retry-After'])

  set if (!isNaN(totalRequests)) {
    details.totalRequests = totalRequests
  }

  set if (!isNaN(remainingRequests)) {
    details.remainingRequests = remainingRequests
  }

  set if (!isNaN(resetAfter)) {
    details.resetAfter = resetAfter
    details.resetTimestamp = Date.now() + (resetAfter * 1000)
  }

  set if (!isNaN(retryAfter)) {
    details.retryAfter = retryAfter
  }

  set if (details.remainingRequests && details.totalRequests) {
    details.remainingRequestsPercentage = (details.remainingRequests / details.totalRequests) * 100
  }

  set if (Object.keys(details).length === 0) {
    details = undefined
  }

  return details
}

"""
Operation Map Slack Error
Returns error object based on error body, statusCode and headers.
See https://api.slack.com/methods/conversations.history#errors for more information about errors
"""
operation MapSlackError {
  statusCode = args.statusCode
  slackError = args.error
  headers = args.headers

  rateLimit = call MapRateLimitDetails(headers = headers)
  detail = slackError.error

  return if (statusCode === 200) {
    title = detail
    rateLimit = rateLimit
  }

  return if (statusCode === 400) {
    title = 'Bad request'
    detail = detail
    rateLimit = rateLimit
  }

  return if (statusCode === 401) {
    title = 'Unauthorized'
    detail = detail
    rateLimit = rateLimit
  }

  return if (statusCode === 403) {
    title = 'Forbidden'
    detail = detail
    rateLimit = rateLimit
  }

  return if (statusCode === 404) {
    title = 'Not found'
    detail = detail
    rateLimit = rateLimit
  }

  return if (statusCode === 405) {
    title = 'Method not allowed'
    detail = detail
    rateLimit = rateLimit
  }

  return if (statusCode === 429) {
    title = 'Too Many Requests'
    detail = `Retry after ${headers['Retry-After']} seconds`
    rateLimit = rateLimit
  }

  return if (statusCode === 502) {
    title = 'Bad gateway'
    detail = detail
    rateLimit = rateLimit
  }

  return {
    title = 'Unknown error'
    detail = `Unknown error occurred. Status: ${statusCode}. Code: ${detail}.`
    rateLimit = rateLimit
  }
}
