profile = "chat/messages@1.0"
provider = "discord"

"""
GetMessages map
"""
map GetMessages {
  destination = input.destination
  afterId = undefined
  beforeId = undefined

  set if (input.afterTimestamp) {
    afterId = call GetSnowflake(ts = input.afterTimestamp)
  }

  set if (input.beforeTimestamp) {
    beforeId = call GetSnowflake(ts = input.beforeTimestamp)
  }

  http GET "/channels/{destination}/messages" {
    request "application/json" {
      query {
        after = afterId
        before = input.page || beforeId
        limit = input.limit
      }

      headers {
        "Authorization" = `Bot ${parameters.accessToken}`
      }
    }

    response 200 "application/json" {
      messages = call MapMessages(messages = body)
      rateLimit = call MapRateLimitDetails(headers = headers)
      
      return map result if ((messages.length < input.limit) || (messages.length === 0)) {
        messages = messages
        rateLimit = rateLimit
      }

      lastMessage = messages[messages.length - 1]

      map result {
        nextPage = lastMessage.id
        messages = messages
        rateLimit = rateLimit
      }
    }

    response {
      error = call MapDiscordError(
        statusCode = statusCode,
        error = body,
        headers = headers,
      )
      
      map error error
    }
  }
}

"""
Operation MapMessages
Returns array mapping messages in received body
"""
operation MapMessages {
  messages = args.messages.map(message => {
    const resultMessage = {
      id: message.id,
      author: {
        id: message.author.id,
        username: message.author.username,
      },
      createdAt: Date.parse(message.timestamp),
      text: message.content,
    };

    let reactions = [], attachments = [];

    if (message.edited_timestamp) {
      resultMessage.updatedAt = Date.parse(message.edited_timestamp);
    }

    if (message.thread) {
      resultMessage.hasThread = true;
      resultMessage.threadId = message.thread.id;	
    }

    if (message.reactions && message.reactions.length > 0) {
      reactions = message.reactions.map(reaction => ({
        emoji: reaction.emoji.name,
        count: reaction.count,
      }));

      resultMessage.reactions = reactions
    }

    if (message.attachments && message.attachments.length > 0) {
      /**
       * Returns UNIX timestamp from specified discord snowflake id
       * More about snowflakes: https://discord.com/developers/docs/reference#snowflakes
       */
      const discordEpoch = 1420070400000;
      const getTimestamp = (snowflake) => Number(BigInt(snowflake) >> BigInt(22)) + discordEpoch;

      attachments = message.attachments.map(attachment => {		
        const createdAt = getTimestamp(attachment.id);
        const resultAttachment = {
          id: attachment.id,
          createdAt: createdAt,
          fileName: attachment.filename,
          url: attachment.url,
        };

        if (attachment.content_type) {
          resultAttachment.mediaType = attachment.content_type;
        }

        return resultAttachment;
      });

      resultMessage.attachments = attachments;
    }

    if (message.message_reference && message.message_reference.message_id) {
      resultMessage.parentId = message.message_reference.message_id;
    }

    // TODO: implement composing URL
    // BLOCKER: unknown guild id
    // Format of public URL:          https://discord.com/channels/<guild-id>/<channel-id>/<message-id>
    // Format of URL poiting to API:  https://discord.com/api/channels/<channel-id>/messages/<message-id>

    return resultMessage;
  });

  return messages
}

"""
Operation MapRateLimitDetails
Returns object mapping rate limit details specified in received headers
"""
operation MapRateLimitDetails {
  headers = args.headers
  details = {}

  bucket = headers['x-ratelimit-bucket']
  totalRequests = parseInt(headers['x-ratelimit-limit'])
  remainingRequests = parseInt(headers['x-ratelimit-remaining'])
  resetTimestamp = parseFloat(headers['x-ratelimit-reset'])
  resetAfter = parseInt(headers['x-ratelimit-reset-after'])
  retryAfter = parseInt(headers['Retry-After'])

  set if (bucket) {
    details.bucket = bucket
  }

  set if (!isNaN(totalRequests)) {
    details.totalRequests = totalRequests
  }

  set if (!isNaN(remainingRequests)) {
    details.remainingRequests = remainingRequests
  }

  set if (!isNaN(resetAfter)) {
    details.resetAfter = resetAfter
  }

  set if (!isNaN(resetTimestamp)) {
    details.resetTimestamp = resetTimestamp
  }

  set if (!isNaN(retryAfter)) {
    details.retryAfter = retryAfter
  }

  set if (details.remainingRequests && details.totalRequests) {
    details.remainingRequestsPercentage = (details.remainingRequests / details.totalRequests) * 100
  }

  set if (Object.keys(details).length === 0) {
    details = undefined
  }

  return details
}

"""
Operation GetSnowflake

Returns discord snowflake id based on input
More about snowflakes: https://discord.com/developers/docs/reference#snowflakes
"""
operation GetSnowflake {
  discordEpoch = 1420070400000

  timestamp = args.ts
  processedDate = timestamp - discordEpoch

  return (BigInt(processedDate) << BigInt(22)).toString()
}

"""
Operation Map Discord Error
Returns error object based on error body, statusCode and headers.
"""
operation MapDiscordError {
  statusCode = args.statusCode
  discordError = args.error
  headers = args.headers

  rateLimit = call MapRateLimitDetails(headers = headers)
  detail = discordError.message

  return if (statusCode === 400) {
    title = 'Bad request'
    detail = discordError
    rateLimit = rateLimit
  }

  return if (statusCode === 401) {
    title = 'Unauthorized'
    detail = detail
    rateLimit = rateLimit
  }

  return if (statusCode === 403) {
    title = 'Forbidden'
    detail = detail
    rateLimit = rateLimit
  }

  return if (statusCode === 404) {
    title = 'Not found'
    detail = detail
    rateLimit = rateLimit
  }

  return if (statusCode === 405) {
    title = 'Method not allowed'
    detail = detail
    rateLimit = rateLimit
  }

  return if (statusCode === 429) {
    title = 'Too Many Requests'
    detail = `${detail} Retry after ${discordError.retry_after} seconds`
    rateLimit = rateLimit
  }

  return if (statusCode === 502) {
    title = 'Bad gateway'
    detail = detail
    rateLimit = rateLimit
  }

  return {
    title = 'Unknown error'
    detail = `Unknown error occurred. Status: ${statusCode}. Message: ${detail}.`
    rateLimit = rateLimit
  }
}
