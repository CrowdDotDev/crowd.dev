profile = "chat/channels@1.0"
provider = "discord"

"""
GetChannels map
"""
map GetChannels {
    return map error if (input.server === undefined) {
        title = "Input parameter `server` is required in case of discord provider"
    }

    http GET "/guilds/{input.server}/channels" {
        request "application/json" {
            headers {
                "Authorization" = `Bot ${parameters.accessToken}`
            }
        }

        response 200 "application/json" {
            channels = call MapChannels(channels = body)
            rateLimit = call MapRateLimitDetails(headers = headers)

            map result {
                channels = channels
                rateLimit = rateLimit
            }
        }

		response {
			error = call MapDiscordError(
				statusCode = statusCode,
				error = body,
				headers = headers,
			)
			
			map error error
		}
    }
}

"""
Operation MapChannels
Returns array mapping channels in received body
"""
operation MapChannels {
    channels = []

    set if(args.channels && args.channels.length > 0) {
        channels = args.channels.filter(channel => [0, 1, 3, 5].includes(channel.type))
    }

    set if(channels.length > 0) {
        channels = call foreach(index of Array(channels.length).fill().map((_, i) => i)) MapChannel(
            index = index,
            channels = channels,
        )
    }

    return channels
}

operation MapChannel {
    index = args.index
    channel = args.channels[index]

    resultChannel = {
        id: channel.id,
    }

    resultChannel.createdAt = call GetTimestamp(id = channel.id)

    set if (channel.name) {
        resultChannel.name = channel.name
    }

    set if (channel.topic) {
        resultChannel.description = channel.topic
    }

    set if (channel.member_count) {
        resultChannel.numOfMembers = channel.member_count
    }

    return resultChannel
}


"""
Operation MapRateLimitDetails
Returns object mapping rate limit details specified in received headers
"""
operation MapRateLimitDetails {
	headers = args.headers
	details = {}

	bucket = headers['x-ratelimit-bucket']
	totalRequests = parseInt(headers['x-ratelimit-limit'])
	remainingRequests = parseInt(headers['x-ratelimit-remaining'])
	resetTimestamp = parseFloat(headers['x-ratelimit-reset'])
	resetAfter = parseInt(headers['x-ratelimit-reset-after'])
	retryAfter = parseInt(headers['Retry-After'])

	set if (bucket) {
		details.bucket = bucket
	}

	set if (!isNaN(totalRequests)) {
		details.totalRequests = totalRequests
	}

	set if (!isNaN(remainingRequests)) {
		details.remainingRequests = remainingRequests
	}

	set if (!isNaN(resetAfter)) {
		details.resetAfter = resetAfter
	}

	set if (!isNaN(resetTimestamp)) {
		details.resetTimestamp = resetTimestamp
	}

	set if (!isNaN(retryAfter)) {
		details.retryAfter = retryAfter
	}

	set if (details.remainingRequests && details.totalRequests) {
		details.remainingRequestsPercentage = (details.remainingRequests / details.totalRequests) * 100
	}

	set if (Object.keys(details).length === 0) {
		details = undefined
	}

	return details
}

"""
Operation Get Timestamp

Returns UNIX timestamp from specified discord snowflake id
More about snowflakes: https://discord.com/developers/docs/reference#snowflakes
"""
operation GetTimestamp {
	discordEpoch = 1420070400000

	snowflake = args.id
	processedSnowflake = Number(BigInt(snowflake) >> BigInt(22))

	return processedSnowflake + discordEpoch
}

"""
Operation Map Discord Error
Returns error object based on error body, statusCode and headers.
"""
operation MapDiscordError {
	statusCode = args.statusCode
	discordError = args.error
	headers = args.headers

	rateLimit = call MapRateLimitDetails(headers = headers)
	detail = discordError.message

	return if (statusCode === 400) {
		title = 'Bad request'
		detail = discordError
		rateLimit = rateLimit
	}

	return if (statusCode === 401) {
		title = 'Unauthorized'
		detail = detail
		rateLimit = rateLimit
	}

	return if (statusCode === 403) {
		title = 'Forbidden'
		detail = detail
		rateLimit = rateLimit
	}

	return if (statusCode === 404) {
		title = 'Not found'
		detail = detail
		rateLimit = rateLimit
	}

	return if (statusCode === 405) {
		title = 'Method not allowed'
		detail = detail
		rateLimit = rateLimit
	}

	return if (statusCode === 429) {
		title = 'Too Many Requests'
		detail = `${detail} Retry after ${discordError.retry_after} seconds`
		rateLimit = rateLimit
	}

	return if (statusCode === 502) {
		title = 'Bad gateway'
		detail = detail
		rateLimit = rateLimit
	}

	return {
		title = 'Unknown error'
		detail = `Unknown error occurred. Status: ${statusCode}. Message: ${detail}.`
		rateLimit = rateLimit
	}
}
