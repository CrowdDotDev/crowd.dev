profile = "chat/send-message@1.0"
provider = "discord"

"""
SendMessage map
"""
map SendMessage {
	http POST "/channels/{input.destination}/messages" {
		request "application/json" {
			headers {
				"Authorization" = `Bot ${parameters.accessToken}`
			}
			body {
				content = input.text
			}
		}

		response 200 "application/json" {
			rateLimit = call MapRateLimitDetails(headers = headers)

			map result {
				messageId = body.id,
				destination = body.channel_id
				rateLimit = rateLimit
			}
		}

		response {
			error = call MapDiscordError(
				statusCode = statusCode,
				error = body,
				headers = headers,
			)
			
			map error error
		}
	}
}

"""
Operation MapRateLimitDetails
Returns object mapping rate limit details specified in received headers
"""
operation MapRateLimitDetails {
	headers = args.headers
	details = {}

	bucket = headers['x-ratelimit-bucket']
	totalRequests = parseInt(headers['x-ratelimit-limit'])
	remainingRequests = parseInt(headers['x-ratelimit-remaining'])
	resetTimestamp = parseFloat(headers['x-ratelimit-reset'])
	resetAfter = parseInt(headers['x-ratelimit-reset-after'])
	retryAfter = parseInt(headers['Retry-After'])

	set if (bucket) {
		details.bucket = bucket
	}

	set if (!isNaN(totalRequests)) {
		details.totalRequests = totalRequests
	}

	set if (!isNaN(remainingRequests)) {
		details.remainingRequests = remainingRequests
	}

	set if (!isNaN(resetAfter)) {
		details.resetAfter = resetAfter
	}

	set if (!isNaN(resetTimestamp)) {
		details.resetTimestamp = resetTimestamp
	}

	set if (!isNaN(retryAfter)) {
		details.retryAfter = retryAfter
	}

	set if (details.remainingRequests && details.totalRequests) {
		details.remainingRequestsPercentage = (details.remainingRequests / details.totalRequests) * 100
	}

	set if (Object.keys(details).length === 0) {
		details = undefined
	}

	return details
}

"""
Operation Map Discord Error
Returns error object based on error body, statusCode and headers.
"""
operation MapDiscordError {
	statusCode = args.statusCode
	discordError = args.error
	headers = args.headers

	rateLimit = call MapRateLimitDetails(headers = headers)
	detail = discordError.message

	return if (statusCode === 400) {
		title = 'Bad request'
		detail = discordError
		rateLimit = rateLimit
	}

	return if (statusCode === 401) {
		title = 'Unauthorized'
		detail = detail
		rateLimit = rateLimit
	}

	return if (statusCode === 403) {
		title = 'Forbidden'
		detail = detail
		rateLimit = rateLimit
	}

	return if (statusCode === 404) {
		title = 'Not found'
		detail = detail
		rateLimit = rateLimit
	}

	return if (statusCode === 405) {
		title = 'Method not allowed'
		detail = detail
		rateLimit = rateLimit
	}

	return if (statusCode === 429) {
		title = 'Too Many Requests'
		detail = `${detail} Retry after ${discordError.retry_after} seconds`
		rateLimit = rateLimit
	}

	return if (statusCode === 502) {
		title = 'Bad gateway'
		detail = detail
		rateLimit = rateLimit
	}

	return {
		title = 'Unknown error'
		detail = `Unknown error occurred. Status: ${statusCode}. Message: ${detail}.`
		rateLimit = rateLimit
	}
}
