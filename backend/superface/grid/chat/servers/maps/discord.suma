profile = "chat/servers@1.0"
provider = "discord"

"""
GetServers map
"""
map GetServers {
   http GET "/users/@me/guilds" {
       request "application/json" {
           headers {
               "Authorization" = `${input.asBot ? 'Bot' : 'Bearer'} ${parameters.accessToken}`
           }
       }

       response 200 "application/json" {
           servers = call MapServers(servers = body)
           rateLimit = call MapRateLimitDetails(headers = headers)

           map result {
                servers = servers
                rateLimit = rateLimit
           }
       }

       response 400 "application/json" {
           map error {
                title = "Bad Request"
                detail = body
           }
       }

       response 401 "application/json" {
            map error {
                title = "Unauthorized"
                detail = body.message
            }
       }

        response 403 "application/json" {
            map error {
                title = "Forbidden"
                detail = body.message
            }
        }

       response 404 "application/json" {
           map error {
               title = "Not Found"
               detail = body.message
           }
       }

       response 405 "application/json" {
           map error {
               title = "Method not allowed"
               detail = body.message
           }
       }

       response 429 "application/json" {
           rateLimit = call MapRateLimitDetails(headers = headers)

           map error {
               title = "Too many requests"
               detail = body.message
               rateLimit = rateLimit
           }
       }

       response 502 "application/json" {
           map error {
               title = "Gateway unavailable"
               detail = body.message
           }
       }
   }
}

operation MapServers {
    servers = []

    call foreach(server of args.servers) GetTimestamp(id = server.id) if (
        args.servers && args.servers.length > 0
    ) {
        fail if (outcome.error) {
            title = 'Getting timestamp failed'
            detail = outcome.error
        }
        
        result = {
            id: server.id,
            createdAt: outcome.data,
            name: server.name,
        }

        set if(server.icon) {
            result.icon = server.icon
        }

        servers = servers.concat(result)
    }

    return servers
}

"""
Operation MapRateLimitDetails
Returns object mapping rate limit details specified in received headers
"""
operation MapRateLimitDetails {
	headers = args.headers
	totalRequests = parseInt(headers['x-ratelimit-limit'])
	remainingRequests = parseInt(headers['x-ratelimit-remaining'])
	remainingRequestsPercentage = (parseInt(headers['x-ratelimit-remaining']) / parseInt(headers['x-ratelimit-limit'])) * 100
	resetTimestamp = parseFloat(headers['x-ratelimit-reset'])
	retryAfter = parseInt(headers['x-ratelimit-reset-after'])

	return {
		bucket = headers['x-ratelimit-bucket']
		totalRequests = totalRequests
		remainingRequests = remainingRequests
		remainingRequestsPercentage = remainingRequestsPercentage
		resetTimestamp = resetTimestamp
		retryAfter = retryAfter
	}
}

"""
OperationGet Timestamp

Returns UNIX timestamp from specified discord snowflake id
More about snowflakes: https://discord.com/developers/docs/reference#snowflakes
"""
operation GetTimestamp {
	discordEpoch = 1420070400000
	snowflake = args.id
	processedSnowflake = Number(BigInt(snowflake) >> BigInt(22))

	return processedSnowflake + discordEpoch
}
