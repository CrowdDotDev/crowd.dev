profile = "chat/threads@1.0"
provider = "discord"

"""
GetThreads map
"""
map GetThreads {
    http GET "/guilds/{input.server}/threads/active" {
		request "application/json" {
			headers {
				"Authorization" = `Bot ${parameters.accessToken}`
			}
		}

       	response 200 "application/json" {
			threads = call MapThreads(threads = body.threads)
			rateLimit = call MapRateLimitDetails(headers = headers)

			result = {
				threads: threads,
			}

			set if (rateLimit) {
				result.rateLimit = rateLimit
			}

			map result result
       	}

		response {
			error = call MapDiscordError(
				statusCode = statusCode,
				error = body,
				headers = headers,
			)
			
			map error error
		}
   }
}

"""
Operation MapThreads
Returns array mapping threads in received body
"""
operation MapThreads {
	threads = []

	set if (args.threads && args.threads.length > 0) {
    	threads = args.threads.filter(thread => [10, 11, 12].includes(thread.type))
	}

    set if (threads.length > 0) {
		// workaround for map interpreter variables merging issue
		threads = call foreach(index of Array(threads.length).fill().map((_, i) => i)) MapThread(
			index = index,
			threads = threads
		)
    }

    return threads
}

operation MapThread {
	index = args.index
	thread = args.threads[index]

	resultThread = {
		id: thread.id
	}

	set if (thread.name) {
		resultThread.name = thread.name
	}

	set if (thread.parent_id) {
		resultThread.channel = thread.parent_id
	}

	set if (thread.thread_metadata) {
		duration = thread.thread_metadata.auto_archive_duration
		ts = Date.parse(thread.thread_metadata.archive_timestamp)
	}

	set if(thread.thread_metadata) {
		resultThread.archiveAt = ts + (duration * 60 * 1000)
	}

	// only available for threads created after 2022-01-09
	set if (thread.thread_metadata && thread.thread_metadata.create_timestamp) {
		resultThread.createdAt = Date.parse(thread.thread_metadata.create_timestamp)
	}

	// for threads after 2022-01-09 createdAt will be time when parent message was sent
	set if (resultThread.createdAt === undefined) {
		resultThread.createdAt = call GetTimestamp(id = thread.id)
	}

	set if (thread.mumber_count) {
		resultThread.numOfMembers = thread.member_count
	}

	return resultThread
}

"""
OperationGet Timestamp

Returns UNIX timestamp from specified discord snowflake id
More about snowflakes: https://discord.com/developers/docs/reference#snowflakes
"""
operation GetTimestamp {
	discordEpoch = 1420070400000

	snowflake = args.id
	processedSnowflake = Number(BigInt(snowflake) >> BigInt(22))

	return processedSnowflake + discordEpoch
}

"""
Operation MapRateLimitDetails
Returns object mapping rate limit details specified in received headers
"""
operation MapRateLimitDetails {
	headers = args.headers
	details = {}

	bucket = headers['x-ratelimit-bucket']
	totalRequests = parseInt(headers['x-ratelimit-limit'])
	remainingRequests = parseInt(headers['x-ratelimit-remaining'])
	resetTimestamp = parseFloat(headers['x-ratelimit-reset'])
	resetAfter = parseInt(headers['x-ratelimit-reset-after'])
	retryAfter = parseInt(headers['Retry-After'])

	set if (bucket) {
		details.bucket = bucket
	}

	set if (!isNaN(totalRequests)) {
		details.totalRequests = totalRequests
	}

	set if (!isNaN(remainingRequests)) {
		details.remainingRequests = remainingRequests
	}

	set if (!isNaN(resetAfter)) {
		details.resetAfter = resetAfter
	}

	set if (!isNaN(resetTimestamp)) {
		details.resetTimestamp = resetTimestamp
	}

	set if (!isNaN(retryAfter)) {
		details.retryAfter = retryAfter
	}

	set if (details.remainingRequests && details.totalRequests) {
		details.remainingRequestsPercentage = (details.remainingRequests / details.totalRequests) * 100
	}

	set if (Object.keys(details).length === 0) {
		details = undefined
	}

	return details
}

"""
Operation Map Discord Error
Returns error object based on error body, statusCode and headers.
"""
operation MapDiscordError {
	statusCode = args.statusCode
	discordError = args.error
	headers = args.headers

	rateLimit = call MapRateLimitDetails(headers = headers)
	detail = discordError.message

	return if (statusCode === 400) {
		title = 'Bad request'
		detail = discordError
		rateLimit = rateLimit
	}

	return if (statusCode === 401) {
		title = 'Unauthorized'
		detail = detail
		rateLimit = rateLimit
	}

	return if (statusCode === 403) {
		title = 'Forbidden'
		detail = detail
		rateLimit = rateLimit
	}

	return if (statusCode === 404) {
		title = 'Not found'
		detail = detail
		rateLimit = rateLimit
	}

	return if (statusCode === 405) {
		title = 'Method not allowed'
		detail = detail
		rateLimit = rateLimit
	}

	return if (statusCode === 429) {
		title = 'Too Many Requests'
		detail = `${detail} Retry after ${discordError.retry_after} seconds`
		rateLimit = rateLimit
	}

	return if (statusCode === 502) {
		title = 'Bad gateway'
		detail = detail
		rateLimit = rateLimit
	}

	return {
		title = 'Unknown error'
		detail = `Unknown error occurred. Status: ${statusCode}. Message: ${detail}.`
		rateLimit = rateLimit
	}
}
