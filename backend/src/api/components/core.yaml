components:
  schemas:
    # defines the attributes of a member, excluding the ID
    CommunityMemberNoId:
      description: A member of your community.
      type: object
      required:
        - username
        - type
        - tenantId

      properties:
        username:
          description: >-
            Usernames of the member in each platform. Exactly one for each platform in which the member is active.
            <br/>Example: ```{ github: 'iamgilfoyle', discord: 'gilfoyle ', crowdUsername: 'gilfoyle' }```
          type: object
          properties:
            crowdUsername:
              description: The username used in the crowd.dev app. By default it will be set to the username in the first platform sent
              type: string
          additionalProperties: true
        type:
          description: Type of member. (member)
          type: string
          enum:
            - member
        email:
          description: Email address of the member
          type: string
        bio:
          description: Bio of the member
          type: string
        location:
          description: Location of the member
          type: string
        organisation:
          description: Organisation of the member
          type: string
        joinedAt:
          description: Date of joining the community
          type: string
          format: date-time
        score:
          description: Engagement score of the member. From 0 to 10. Set -1 for not yet calculated.
          type: number
        reach:
          description: >-
            Reach of the member in each platform. At most one for each platform in which the member is active.
            <br/>Example: ```{ github: 10, twitter: 250, total: 260 }```
          type: object
          properties:
            total:
              description: Sum of all the platform reaches.
              type: string
          additionalProperties: true
        crowdInfo:
          description: >-
            Attributes of the member gathered from integrations. At most one attribute for each platform.<br/>
            If the member is a team member, it will also have a field `team: true`. <br/>
            Example: `{team: true, github: {url: ...}, discord: {id: ...}}`.
          type: object
          properties:
            team:
              description: This will be present if the member is a team member.
              default: false
              type: boolean
          additionalProperties: true
        info:
          description: Attributes of the member added by the crowd.dev user
          type: object
          additionalProperties: true
        activities:
          description: Activities of the member
          type: array
          items:
            $ref: '#/components/schemas/Activity'
        tags:
          description: Tags associated with the member. Each element in the array is the ID of the tag.
          type: array
          items:
            type: string
        createdAt:
          description: Date the member was created
          type: string
          format: date-time
        updatedAt:
          description: Date the member was last updated
          type: string
          format: date-time
        tenantId:
          description: Your workspace/tenant id
          type: string
          format: uuid

      xml:
        name: CommunityMember

    # defines the attributes of a tag, excluding the ID.
    TagNoId:
      description: A tag associated with a member.
      type: object
      required:
        - name
        - tenantId
      properties:
        name:
          description: The name of the tag
          type: string
        createdAt:
          description: Date the tag was created
          type: string
          format: date-time
        updatedAt:
          description: Date the tag was last updated
          type: string
          format: date-time
        tenantId:
          description: Your workspace/tenant id
          type: string
          format: uuid

      xml:
        name: Tag

    # defines the attributes of an activity, excluding the ID
    ActivityNoId:
      description: An activity performed by a member of your community.
      type: object

      required:
        - type
        - platform
        - timestamp
        - communityMemberId
        - tenantId
        - sourceId

      properties:
        type:
          description: Type of activity
          type: string

        timestamp:
          description: Date and time when the activity took place
          type: string
          format: date-time

        platform:
          description: Platform on which the activity took place
          type: string

        sourceId:
          description: The id of the activity in the platform (e.g. the id of the message in Discord)
          type: string
        score:
          description: Score associated with the activity
          type: number
        isKeyAction:
          description: Whether the activity was a key action
          type: boolean
        parentId:
          description: Id of the parent activity, if the activity has a parent
          type: string
          format: uuid
        crowdInfo:
          description: Attributes of the activity gathered from integrations.
          type: object
          additionalProperties: true
        info:
          description: Attributes of the activity added by the crowd.dev user
          type: object
          additionalProperties: true
        createdAt:
          description: Date the activity was created
          type: string
          format: date-time
        updatedAt:
          description: Date the activity was last updated
          type: string
          format: date-time
        tenantId:
          description: Your workspace/tenant id
          type: string
          format: uuid

      xml:
        name: ActivityNoId

    # defines the attributes of a conversation, excluding the ID
    ConversationNoId:
      type: object
      required:
        - platform
        - slug
        - tenantId

      description: A conversation is a group of activities. Some attributes, like slug, are mostly used in public pages.
      properties:
        title:
          description: Title of the conversation
          type: string

        slug:
          description: Unique slug of the conversation
          type: string

        published:
          description: Whether the conversation is publicaly visible from open pages.
          type: boolean
          default: false

        createdAt:
          description: Date the conversation was created
          type: string
          format: date-time
        updatedAt:
          description: Date the conversation was last updated
          type: string
          format: date-time
        tenantId:
          description: Your workspace/tenant id
          type: string
          format: uuid

      xml:
        name: Conversation

    # defines automation type enum
    AutomationType:
      description: Automation type
      type: string
      enum: ['webhook']

    # defines automation state enum
    AutomationState:
      description: Automation state
      type: string
      enum: ['active', 'disabled']

    # defines automation triggers
    AutomationTrigger:
      description: What will trigger an automation
      type: string
      enum: ['new_activity', 'new_member']

    # defines automation execution state
    AutomationExecutionState:
      description: What was the state of the automation execution
      type: string
      enum: ['success', 'error']

    # defines webhook automation settings
    WebhookAutomationSettings:
      description: Settings used by automation with type webhook
      type: object
      required:
        - url
      properties:
        url:
          description: URL to POST webhook data to
          type: string
          format: uri

    # defines new activity triggered automation settings
    NewActivityAutomationSettings:
      description: Settings used by automation that is triggered by new activities
      type: object
      required:
        - types
        - platforms
        - keywords
        - teamMemberActivities
      properties:
        types:
          description: 'If activity type matches any of these we should trigger this automation'
          type: array
          items:
            type: string
        platforms:
          description: 'If activity came from any of these platforms we should trigger this automation'
          type: array
          items:
            type: string
        keywords:
          description: 'If activity content contains any of these keywords we should trigger this automation'
          type: array
          items:
            type: string
        teamMemberActivities:
          description: 'If activity came from any of our team members - should we trigger automation or not?'
          type: boolean

    # defines automation settings object
    AutomationSettings:
      description: Settings based on automation type and trigger - you need to provide union object of both automation type based settings and trigger based settings
      type: object
      anyOf:
        - $ref: '#/components/schemas/WebhookAutomationSettings'
        - $ref: '#/components/schemas/NewActivityAutomationSettings'
