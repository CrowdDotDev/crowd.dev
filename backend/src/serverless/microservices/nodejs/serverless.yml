service: nodeMicroservices
frameworkVersion: '3'
useDotenv: true

custom:
  webpack:
    keepOutputDirectory: true
    includeModules:
      forceInclude:
        - vm2
        - pg
  currentStage: ${opt:stage, self:provider.stage} # 'staging' is default unless overriden by --stage flag

  datadog:
    apiKeySecretArn: arn:aws:secretsmanager:${env:AWS_REGION}:359905442998:secret:DdApiKeySecret-L1wTjkqsgwWF-dA1ShF
    enableXrayTracing: false
    enableDDTracing: true
    enableDDLogs: true
    site: datadoghq.eu
    captureLambdaPayload: true
    tags: 'context:node-microservices'
    enabled: ${strToBool(${env:DATADOG_ENABLED})}

  localstack:
    host: ${env:LOCALSTACK_HOSTNAME}
    stages:
      # list of stages for which the plugin should be enabled
      - local
    # autostart: true  # optional - Start LocalStack in Docker on Serverless deploy
    lambda:
      # Enable this flag to improve performance
      mountCode: ${env:LOCALSTACK_LAMBDA_MOUNT_CODE, false}
    docker:
      # Enable this flag to run "docker ..." commands as sudo
      sudo: False
    debug: True

provider:
  name: aws
  runtime: nodejs14.x
  stage: staging
  memorySize: 5000 # optional, in MB, default is 1024
  timeout: 900 # optional, in seconds, default is 6
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'states:StartExecution'
        - sqs:SendMessage
        - secretsmanager:GetSecretValue
      Resource:
        - '*'
    - Effect: 'Allow'
      Action: s3:ListBucket
      Resource: 'arn:aws:s3:::${env:MICROSERVICES_ASSETS_BUCKET}'
    - Effect: 'Allow'
      Action:
        - s3:HeadObject
        - s3:GetObject
      Resource: 'arn:aws:s3:::${env:MICROSERVICES_ASSETS_BUCKET}/*'
  region: ${env:AWS_REGION}

constructs:
  jobs:
    type: queue
    alarm: joan@crowd.dev
    max-retries: 2
    fifo: true
    batchSize: 1 # Lambda will receive 1 message at a time
    worker:
      timeout: 900
      handler: ./handler.consumer
      environment:
        NODE_ENV: ${env:NODE_ENV}
        NODE_MICROSERVICES_STATEMACHINE_ARN: ${env:NODE_MICROSERVICES_STATEMACHINE_ARN}
        LOCALSTACK_HOSTNAME: ${env:LOCALSTACK_HOSTNAME}
        LOCALSTACK_PORT: ${env:LOCALSTACK_PORT}

functions:
  weeklyAnalyticsEmailsCoordinator:
    handler: ./handler.handlerWeeklyAnalyticsEmailsCoordinator
    events:
      - schedule: cron(0 8 ? * MON *)

    environment:
      NODE_ENV: ${env:NODE_ENV}
      EDITION: ${env:EDITION}
      SEGMENT_WRITE_KEY: ${env:SEGMENT_WRITE_KEY}
      NODE_MICROSERVICES_SQS_URL: ${env:NODE_MICROSERVICES_SQS_URL}
      DATABASE_USERNAME: ${env:DATABASE_USERNAME}
      DATABASE_DIALECT: ${env:DATABASE_DIALECT}
      DATABASE_PASSWORD: ${env:DATABASE_PASSWORD}
      DATABASE_DATABASE: ${env:DATABASE_DATABASE}
      DATABASE_HOST_READ: ${env:DATABASE_HOST_WRITE}
      DATABASE_HOST_WRITE: ${env:DATABASE_HOST_WRITE}
      DATABASE_LOGGING: ${env:DATABASE_LOGGING}
      SEARCH_ENGINE_HOST: ${env:SEARCH_ENGINE_HOST}
      SEARCH_ENGINE_API_KEY: ${env:SEARCH_ENGINE_API_KEY}
      SERVICE: microservices-nodejs

  nodeMicroservicesWorker:
    handler: ./handler.worker
    environment:
      NODE_ENV: ${env:NODE_ENV}
      EDITION: ${env:EDITION}
      SEGMENT_WRITE_KEY: ${env:SEGMENT_WRITE_KEY}
      NODE_MICROSERVICES_QUEUE_URL: ${env:NODE_MICROSERVICES_SQS_URL}
      DATABASE_USERNAME: ${env:DATABASE_USERNAME}
      DATABASE_DIALECT: ${env:DATABASE_DIALECT}
      DATABASE_PASSWORD: ${env:DATABASE_PASSWORD}
      DATABASE_DATABASE: ${env:DATABASE_DATABASE}
      DATABASE_HOST_READ: ${env:DATABASE_HOST_WRITE}
      DATABASE_HOST_WRITE: ${env:DATABASE_HOST_WRITE}
      DATABASE_LOGGING: ${env:DATABASE_LOGGING}
      CUBE_JS_URL: ${env:CUBE_JS_URL}
      CUBE_JS_JWT_SECRET: ${env:CUBE_JS_JWT_SECRET}
      SENDGRID_EMAIL_FROM: ${env:SENDGRID_EMAIL_FROM, false}
      SENDGRID_WEEKLY_ANALYTICS_UNSUBSCRIBE_GROUP_ID: ${env:SENDGRID_WEEKLY_ANALYTICS_UNSUBSCRIBE_GROUP_ID, false}
      SENDGRID_NAME_FROM: ${env:SENDGRID_NAME_FROM, false}
      SENDGRID_KEY: ${env:SENDGRID_KEY, false}
      CUBE_JS_JWT_EXPIRY: ${env:CUBE_JS_JWT_EXPIRY}
      SERVICE: microservices-nodejs
      FRONTEND_URL: ${env:FRONTEND_URL}
      SEARCH_ENGINE_HOST: ${env:SEARCH_ENGINE_HOST}
      SEARCH_ENGINE_API_KEY: ${env:SEARCH_ENGINE_API_KEY}
      SENDGRID_TEMPLATE_WEEKLY_ANALYTICS: ${env:SENDGRID_TEMPLATE_WEEKLY_ANALYTICS, false}
      MICROSERVICES_ASSETS_BUCKET: ${env:MICROSERVICES_ASSETS_BUCKET}
      NODE_TLS_REJECT_UNAUTHORIZED: 1

stepFunctions:
  stateMachines:
    nodeMicroservicesStepFunction:
      name: NodeMicroservicesStateMachine${self:custom.currentStage}
      definition:
        Comment: 'State machine that runs the node microservices'
        StartAt: WorkerState
        States:
          WorkerState:
            Type: Task
            Resource:
              Fn::GetAtt: [nodeMicroservicesWorker, Arn]
            End: true

resources:
  Outputs:
    NodeMicroservicesStateMachine:
      Description: The ARN of the example state machine
      Value:
        Ref: NodeMicroservicesStateMachine${self:custom.currentStage}

plugins:
  - serverless-lift
  - serverless-step-functions
  - serverless-webpack
  - serverless-localstack
  - serverless-plugin-datadog
