service: dbOperations
frameworkVersion: '3'
useDotenv: true

custom:
  webpack:
    keepOutputDirectory: true
    includeModules:
      forceInclude:
        - pg

  currentStage: ${opt:stage, self:provider.stage} # 'staging' is default unless overriden by --stage flag

  datadog:
    apiKeySecretArn: arn:aws:secretsmanager:${env:AWS_REGION}:359905442998:secret:DdApiKeySecret-L1wTjkqsgwWF-dA1ShF
    enableXrayTracing: false
    enableDDTracing: true
    enableDDLogs: true
    site: datadoghq.eu
    captureLambdaPayload: true
    tags: 'context:dbOperations'
    enabled: ${strToBool(${env:DATADOG_ENABLED})}

  localstack:
    host: ${env:LOCALSTACK_HOSTNAME}
    stages:
      # list of stages for which the plugin should be enabled
      - local
    # host: ${env:LOCALSTACK_HOSTNAME}  # optional - LocalStack host to connect to
    # autostart: true  # optional - Start LocalStack in Docker on Serverless deploy
    lambda:
      # Enable this flag to improve performance
      mountCode: ${env:LOCALSTACK_LAMBDA_MOUNT_CODE, false}
    docker:
      # Enable this flag to run "docker ..." commands as sudo
      sudo: False
    debug: True

provider:
  name: aws
  runtime: nodejs14.x
  stage: staging
  memorySize: 1024 # optional, in MB, default is 1024
  timeout: 900 # optional, in seconds, default is 6
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'states:StartExecution'
        - sqs:SendMessage
        - secretsmanager:GetSecretValue
      Resource:
        - '*'
  region: ${env:AWS_REGION}

constructs:
  jobs:
    type: queue
    alarm: joan@crowd.dev
    max-retries: 2
    fifo: true
    batchSize: 1 # Lambda will receive 1 message at a time
    worker:
      timeout: 900
      handler: ./handler.consumer
      environment:
        NODE_ENV: ${env:NODE_ENV}
        EDITION: ${env:EDITION}
        SEGMENT_WRITE_KEY: ${env:SEGMENT_WRITE_KEY}
        NODE_MICROSERVICES_SQS_URL: ${env:NODE_MICROSERVICES_SQS_URL}
        DATABASE_USERNAME: ${env:DATABASE_USERNAME}
        DATABASE_DIALECT: 'postgres'
        DATABASE_PASSWORD: ${env:DATABASE_PASSWORD}
        DATABASE_DATABASE: ${env:DATABASE_DATABASE}
        DATABASE_HOST_READ: ${env:DATABASE_HOST_WRITE}
        DATABASE_HOST_WRITE: ${env:DATABASE_HOST_WRITE}
        DATABASE_LOGGING: ${env:DATABASE_LOGGING}
        SEARCH_ENGINE_HOST: ${env:SEARCH_ENGINE_HOST}
        SEARCH_ENGINE_API_KEY: ${env:SEARCH_ENGINE_API_KEY}
        SERVICE: dbOperations

functions:
  testWorker:
    handler: ./handler.consumer
    environment:
      NODE_ENV: ${env:NODE_ENV}
      EDITION: ${env:EDITION}
      SEGMENT_WRITE_KEY: ${env:SEGMENT_WRITE_KEY}
      NODE_MICROSERVICES_SQS_URL: ${env:NODE_MICROSERVICES_SQS_URL}
      DATABASE_USERNAME: ${env:DATABASE_USERNAME}
      DATABASE_DIALECT: 'postgres'
      DATABASE_PASSWORD: ${env:DATABASE_PASSWORD}
      DATABASE_DATABASE: ${env:DATABASE_DATABASE}
      DATABASE_HOST_READ: ${env:DATABASE_HOST_WRITE}
      DATABASE_HOST_WRITE: ${env:DATABASE_HOST_WRITE}
      DATABASE_LOGGING: ${env:DATABASE_LOGGING}
      SEARCH_ENGINE_HOST: ${env:SEARCH_ENGINE_HOST}
      SEARCH_ENGINE_API_KEY: ${env:SEARCH_ENGINE_API_KEY}
      SERVICE: dbOperations

plugins:
  - serverless-lift
  - serverless-webpack
  - serverless-localstack
  - serverless-plugin-datadog
