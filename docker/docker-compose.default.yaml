version: '3.1'

services:

  cubejs:
    image: cubejs/cube
    ports:
      - "4000:4000"
      - "3000:3000"
    volumes:
      - '../backend/src/cubejs:/cube/conf'
    environment:
      - CUBEJS_DEV_MODE=true
      - CUBEJS_DB_HOST=db
      - CUBEJS_DB_PORT=5432
      - CUBEJS_DB_NAME=crowd-web
      - CUBEJS_DB_USER=postgres
      - CUBEJS_DB_PASS=example
      - CUBEJS_DB_TYPE=postgres
      - CUBEJS_API_SECRET=137ea167812145c6d77452a58d7dd29b
      - CUBEJS_EXTERNAL_DEFAULT=true
      - CUBEJS_SCHEDULED_REFRESH_DEFAULT=true

  nginx:
    image: nginx
    volumes:
      - ../nginx/templates:/etc/nginx/templates
      - ../nginx/ssl:/etc/nginx/ssl
    ports:
      - "443:443"
      - "8080:8080"
      - "8081:8081"
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=443
    depends_on:
      - crowd-backend
      - crowd-frontend
      - crowd-conversations
      - cubejs

  db:
    image: postgres:13.6
    environment:
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=crowd-web
    ports:
      - 5432:5432
    volumes:
      - pgdata-dev:/var/lib/postgresql/data

  crowd-frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile-frontend-dev
    image: crowddotdev/frontend:${CROWD_VERSION}-dev
    env_file:
      - ../frontend/.env
    command: npm start
    environment:
      - DOCKER_BUILDKIT=1

  crowd-backend:
    build:
      context: ../backend
      dockerfile: Dockerfile-backend-dev
    image: crowddotdev/backend:${CROWD_VERSION}-dev
    dns: 1.1.1.1
    user: 1000:1000
    env_file:
      - ../backend/.env
    command: >
        sh -c "npm start"
    environment:
      - DOCKER_BUILDKIT=1
    depends_on:
      - db

  crowd-conversations:
    build:
      context: ../premium/community-help-center
      dockerfile: Dockerfile-conversations
    image: crowddotdev/conversations:${CROWD_VERSION}-dev
    ports:
      - 24678:24678 #vite server port
    command: npm run dev
    environment:
      - DOCKER_BUILDKIT=1
      - CONVERSATIONS_INDEX=conversations
      - SEARCH_ENGINE_API_KEY=dev
      - SEARCH_ENGINE_HOST=http://search-engine:7700
      - SETTINGS_INDEX=settings
      - APP_DOMAIN=open.localhost

  search-engine:
    image: getmeili/meilisearch:v0.27.2
    ports:
      - 7700:7700
    volumes:
      - search-dev:/data.ms

  localstack:
    privileged: true
    container_name: "${LOCALSTACK_DOCKER_NAME-localstack_main}"
    image: localstack/localstack:latest
    ports:
      - "127.0.0.1:4510-4559:4510-4559"  # external service port range
      - "127.0.0.1:4566:4566"            # LocalStack Edge Proxy
    dns: 1.1.1.1
    environment:
      - DEBUG=1
      - LS_LOG=debug
      - DATA_DIR=/tmp/localstack/data
      - LAMBDA_EXECUTOR=docker-reuse
      - LAMBDA_STAY_OPEN_MODE=0
      - HOST_TMP_FOLDER=/tmp/localstack
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LAMBDA_REMOTE_DOCKER=false
      - SERVICES=s3,sqs,lambda,cloudformation,iam,cloudwatch,sts,events,xray,ecr,sns,stepfunctions,apigateway
      - EDGE_PORT=4566
      - HOSTNAME_EXTERNAL=localstack
      - LOCALSTACK_HOSTNAME=localstack
      - DNS_ADDRESS=0
      - REQUIRE_PRO=0
      - AWS_DEFAULT_REGION=eu-central-1
      - DEFAULT_REGION=eu-central-1
      - LAMBDA_DOCKER_DNS=1.1.1.1
      - LAMBDA_TRUNCATE_STDOUT=10000
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - SYNCHRONOUS_SQS_EVENTS=false
      - LAMBDA_DOCKER_FLAGS=-v crowd_py-dist-packages:/var/lang/lib/python3.8/site-packages:ro
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"

  sls-deployer-integrations:
    image: crowddotdev/backend:${CROWD_VERSION}-dev
    user: 1000:1000
    working_dir: /usr/crowd/backend
    command: >
        sh -c "cd src/serverless/integrations && 
               LAMBDA_MOUNT_CWD=$${PROJECT_ROOT}/backend/src/serverless/integrations npx serverless deploy --stage local &&
               cd /usr/crowd/backend && npm run start:integrations"

    env_file: ../backend/.env

  sls-deployer-nodejs-microservices:
    image: crowddotdev/backend:${CROWD_VERSION}-dev
    user: 1000:1000
    working_dir: /usr/crowd/backend
    command: >
        sh -c "cd src/serverless/microservices/nodejs && 
               LAMBDA_MOUNT_CWD=$${PROJECT_ROOT}/backend/src/serverless/microservices/nodejs npx serverless deploy --stage local &&
               cd /usr/crowd/backend && npm run start:nodeMicroservices"
    env_file: ../backend/.env

  sls-deployer-dbOperations:
    image: crowddotdev/backend:${CROWD_VERSION}-dev
    user: 1000:1000
    working_dir: /usr/crowd/backend
    command: >
        sh -c "cd src/serverless/dbOperations && 
               LAMBDA_MOUNT_CWD=$${PROJECT_ROOT}/backend/src/serverless/dbOperations npx serverless deploy --stage local &&
               cd /usr/crowd/backend && npm run start:dbOperations"
               
    env_file: ../backend/.env

  sls-deployer-python-microservices:
    image: crowddotdev/backend:${CROWD_VERSION}-dev
    user: 1000:1000
    working_dir: /usr/crowd/backend
    command: >
        sh -c "cd src/serverless/microservices/python/serverless && 
               cp serverless.dev.yml serverless.yml &&
               npx serverless deploy --stage local &&
               tail -f /dev/null"
               
    env_file: ../backend/.env

  sls-python-lambda-packages:
    image: crowddotdev/lambda-py-packages:${CROWD_VERSION}-dev
    build:
      context: ../backend/src/serverless/microservices/python
      dockerfile: Dockerfile-lambda-lambci
    volumes:
      - py-dist-packages:/var/lang/lib/python3.8/site-packages

volumes:
  pgdata-dev:
  search-dev:
  py-dist-packages:
  exclude-fe:
  exclude-be:
  exclude-conversations:
  exclude-nuxt:
  exclude-sls-integrations:
  exclude-sls-node-microservices:
  exclude-sls-py-microservices:
  exclude-sls-dbOperations:
